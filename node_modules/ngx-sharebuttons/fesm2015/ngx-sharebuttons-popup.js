import { InjectionToken, Component, ChangeDetectionStrategy, Optional, Inject, ElementRef, Injectable, Injector, EventEmitter, Directive, Input, Output, HostListener, NgModule } from '@angular/core';
import { DOCUMENT, CommonModule } from '@angular/common';
import { SHARE_BUTTONS, ShareService, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import { ShareButtonsModule } from 'ngx-sharebuttons/buttons';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { Overlay } from '@angular/cdk/overlay';
import { ComponentPortal, PortalInjector } from '@angular/cdk/portal';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

const SHARE_POPUP_OPTIONS = new InjectionToken('SHARE_POPUP_OPTIONS');

class ShareButtonsPopup {
    constructor(_document, options, _focusTrapFactory, _elementRef) {
        this._document = _document;
        this.options = options;
        this._focusTrapFactory = _focusTrapFactory;
        this._elementRef = _elementRef;
        this._savePreviouslyFocusedElement();
    }
    get isBtnCopy() {
        return this.options.exclude && this.options.exclude.filter((btn) => btn === 'copy').length > 0;
    }
    ngAfterViewInit() {
        this._trapFocus();
    }
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy() {
        this.overlayRef.dispose();
        this._restoreFocus();
    }
    /** Moves the focus inside the focus trap. */
    _trapFocus() {
        if (!this._focusTrap) {
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        }
        // If were to attempt to focus immediately, then the content of the lightbox would not yet be
        // ready in instances where change detection has to run first. To deal with this, we simply
        // wait for the microtask queue to be empty.
        this._focusTrap.focusInitialElementWhenReady();
    }
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    _savePreviouslyFocusedElement() {
        if (this._document) {
            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;
            // Note that there is no focus method when rendering on the server.
            if (this._elementRef.nativeElement.focus) {
                // Move focus onto the lightbox immediately in order to prevent the user from accidentally
                // opening multiple dialogs at the same time. Needs to be async, because the element
                // may not be focusable immediately.
                Promise.resolve().then(() => this._elementRef.nativeElement.focus());
            }
        }
    }
    /** Restores focus to the element that was focused before the lightbox opened. */
    _restoreFocus() {
        const toFocus = this._elementFocusedBeforeDialogWasOpened;
        // We need the extra check, because IE can set the `activeElement` to null in some cases.
        if (toFocus && typeof toFocus.focus === 'function') {
            toFocus.focus();
        }
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
    }
}
ShareButtonsPopup.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons-popup',
                template: "<div class=\"sb-overlay\">\n  <h3>Share</h3>\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\n    <span>{{ shareButton?.url }}</span>\n  </div>\n\n  <share-buttons [include]=\"options?.include\"\n                 [exclude]=\"options?.exclude\"\n                 [theme]=\"options?.theme\"\n                 [url]=\"options?.url\"\n                 [title]=\"options?.title\"\n                 [description]=\"options?.description\"\n                 [image]=\"options?.image\"\n                 [tags]=\"options?.tags\"\n                 [autoSetMeta]=\"options?.autoSetMeta\"\n                 [show]=\"options?.show\"\n                 [showIcon]=\"options?.showIcon\"\n                 [showText]=\"options?.showText\"\n                 [size]=\"options?.size\"\n                 (opened)=\"options?.opened?.emit($event)\"\n                 (closed)=\"options?.closed?.emit($event)\"\n                 [disabled]=\"options?.disabled\">\n  </share-buttons>\n\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\n  </div>\n\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    'tabindex': '-1',
                    'aria-modal': 'true',
                    '[attr.role]': 'role',
                    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',
                    '[attr.aria-label]': 'ariaLabel',
                    '[attr.aria-describedby]': 'ariaDescribedBy || null'
                },
                styles: [".sb-close-overlay,:host{align-items:center;display:flex;justify-content:center}h3{margin:5px;position:absolute;top:5px}.sb-overlay{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}::ng-deep share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}::ng-deep .sb-backdrop{background-color:rgba(0,0,0,.32)}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width:480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){::ng-deep .sb-close-overlay{margin:2px}}"]
            },] }
];
ShareButtonsPopup.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SHARE_POPUP_OPTIONS,] }] },
    { type: FocusTrapFactory },
    { type: ElementRef }
];

class SharePopupService {
    constructor(_overlay, _injector) {
        this._overlay = _overlay;
        this._injector = _injector;
    }
    open(config) {
        if (!this._overlayRef || !this._overlayRef.hasAttached()) {
            this._overlayRef = this._overlay.create({
                backdropClass: 'sb-backdrop',
                hasBackdrop: true,
                panelClass: '',
                positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                scrollStrategy: this._overlay.scrollStrategies.block(),
                disposeOnNavigation: true
            });
            const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
            const sharePopupRef = this._overlayRef.attach(popupComponentPortal);
            sharePopupRef.instance.overlayRef = this._overlayRef;
            if (config.hasBackdrop) {
                this._overlayRef.backdropClick().subscribe(() => this.close());
            }
        }
    }
    /**
     * Close Share Popup Overlay
     */
    close() {
        if (this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
    }
    createInjector(dataToPass) {
        const injectorTokens = new WeakMap();
        injectorTokens.set(SHARE_POPUP_OPTIONS, dataToPass);
        return new PortalInjector(this._injector, injectorTokens);
    }
}
SharePopupService.decorators = [
    { type: Injectable }
];
SharePopupService.ctorParameters = () => [
    { type: Overlay },
    { type: Injector }
];

class SharePopupButtonsDirective {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.include = Object.keys(SHARE_BUTTONS);
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
        this._popupClosed = this.popupClosed.subscribe(() => this.close());
    }
    onClick(e) {
        this._sharePopup.open({
            theme: this.theme,
            include: this.include,
            exclude: this.exclude,
            url: this.url,
            title: this.title,
            description: this.description,
            image: this.image,
            tags: this.tags,
            autoSetMeta: this.autoSetMeta,
            show: this.show,
            showIcon: this.showIcon,
            showText: this.showText,
            size: this.size,
            disabled: this.disabled,
            opened: this.opened,
            closed: this.closed,
            closeIcon: this.closeIcon,
            closeClick: this.popupClosed,
            hasBackdrop: this.hasBackdrop,
            backdropClass: this.backdropClass
        });
    }
    ngOnDestroy() {
        this._popupClosed.unsubscribe();
    }
    close() {
        this._sharePopup.close();
    }
}
SharePopupButtonsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[shareButtonsPopup]'
            },] }
];
SharePopupButtonsDirective.ctorParameters = () => [
    { type: SharePopupService },
    { type: ShareService }
];
SharePopupButtonsDirective.propDecorators = {
    theme: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    closeIcon: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    popupClosed: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

class SharePopupComponent {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.icon = ['fas', 'share'];
        this.text = 'Share';
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
    }
}
SharePopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-popup-button',
                template: `
    <div class="sb-button sb-{{theme}}">
      <button shareButtonsPopup
              class="sb-wrapper"
              [theme]="theme"
              [include]="include"
              [exclude]="exclude"
              [show]="show"
              [url]="url"
              [showIcon]="showIcon"
              [showText]="showText"
              [size]="size"
              [tags]="tags"
              [autoSetMeta]="autoSetMeta"
              [title]="title"
              [description]="description"
              [image]="image"
              (closed)="closed.emit($event)"
              (opened)="opened.emit($event)">
        <div class="sb-content">

          <div *ngIf="showIcon" class="sb-icon">
            <fa-icon [icon]="icon" [fixedWidth]="true"></fa-icon>
          </div>

          <div *ngIf="showText" class="sb-text">
            {{ text }}
          </div>

        </div>
      </button>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--button-color:#282c34}"]
            },] }
];
SharePopupComponent.ctorParameters = () => [
    { type: SharePopupService },
    { type: ShareService }
];
SharePopupComponent.propDecorators = {
    theme: [{ type: Input }],
    icon: [{ type: Input }],
    text: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    closeIcon: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    popupClosed: [{ type: Output }]
};

class ShareButtonsPopupModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsPopupModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButtonsPopup,
                    SharePopupButtonsDirective,
                    SharePopupComponent
                ],
                imports: [
                    CommonModule,
                    ShareButtonsModule,
                    FontAwesomeModule
                ],
                exports: [
                    ShareButtonsModule,
                    ShareButtonsPopup,
                    SharePopupButtonsDirective,
                    SharePopupComponent
                ],
                providers: [
                    SharePopupService
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtonsPopup, ShareButtonsPopupModule, SHARE_POPUP_OPTIONS as ɵb, SharePopupButtonsDirective as ɵc, SharePopupService as ɵd, SharePopupComponent as ɵe };
//# sourceMappingURL=ngx-sharebuttons-popup.js.map
