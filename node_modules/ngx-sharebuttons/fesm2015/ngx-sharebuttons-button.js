import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, HostBinding, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { ShareService, SHARE_BUTTONS_CONFIG, ShareModule } from 'ngx-sharebuttons';

// Uncomment the following line in development mode
// import { ShareService, ShareDirective } from '../../src/public-api';
class ShareButton {
    constructor(_share) {
        this._share = _share;
        /** Show button icon */
        this.showIcon = true;
        /** Show button text */
        this.showText = false;
        /** Button size */
        this.size = this._share.config.size;
        /** Button theme */
        this.theme = this._share.config.theme;
        /** Stream that emits when share dialog is opened */
        this.opened = new EventEmitter();
        /** Stream that emits when share dialog is closed */
        this.closed = new EventEmitter();
    }
    /** Set theme as button class */
    get buttonClass() {
        return `sb-button sb-${this.theme}`;
    }
}
ShareButton.decorators = [
    { type: Component, args: [{
                selector: 'share-button',
                template: "<button type=\"button\"\n        class=\"sb-wrapper\"\n        #btn=\"shareButton\"\n        [shareButton]=\"button\"\n        [url]=\"url\"\n        [image]=\"image\"\n        [title]=\"title\"\n        [description]=\"description\"\n        [tags]=\"tags\"\n        [autoSetMeta]=\"autoSetMeta\"\n        (opened)=\"opened.emit($event)\"\n        (closed)=\"closed.emit($event)\"\n        [class.sb-show-icon]=\"showIcon\"\n        [class.sb-show-text]=\"showText\"\n        [style.fontSize.px]=\"(1 + size/20) * 14\"\n        [disabled]=\"disabled\">\n\n  <div *ngIf=\"btn\" class=\"sb-content\">\n\n    <div *ngIf=\"showIcon && btn.icon\" class=\"sb-icon\">\n      <fa-icon [icon]=\"icon || btn.icon\" [fixedWidth]=\"true\"></fa-icon>\n    </div>\n\n    <div *ngIf=\"showText\" class=\"sb-text\">\n      {{ text || btn.text }}\n    </div>\n\n  </div>\n</button>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--sb-margin:0.3125em}"]
            },] }
];
ShareButton.ctorParameters = () => [
    { type: ShareService }
];
ShareButton.propDecorators = {
    button: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    text: [{ type: Input }],
    icon: [{ type: Input }],
    size: [{ type: Input }],
    theme: [{ type: Input }],
    disabled: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    buttonClass: [{ type: HostBinding, args: ['class',] }]
};

class ShareButtonModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ShareButton
                ],
                imports: [
                    ShareModule,
                    FontAwesomeModule,
                    CommonModule
                ],
                exports: [
                    ShareModule,
                    FontAwesomeModule,
                    ShareButton
                ]
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { ShareButton, ShareButtonModule };
//# sourceMappingURL=ngx-sharebuttons-button.js.map
