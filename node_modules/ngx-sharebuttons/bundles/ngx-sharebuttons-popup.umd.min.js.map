{"version":3,"sources":["../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.model.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup.service.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup-buttons.directive.ts","../../../projects/ngx-sharebuttons/popup/src/share-popup.component.ts","../../../projects/ngx-sharebuttons/popup/src/share-buttons-popup.module.ts"],"names":["SHARE_POPUP_OPTIONS","InjectionToken","ShareButtonsPopup","_document","options","_focusTrapFactory","_elementRef","this","_savePreviouslyFocusedElement","Object","defineProperty","prototype","exclude","filter","btn","length","ngAfterViewInit","_trapFocus","ngOnDestroy","overlayRef","dispose","_restoreFocus","_focusTrap","create","nativeElement","focusInitialElementWhenReady","_this","_elementFocusedBeforeDialogWasOpened","activeElement","focus","Promise","resolve","then","toFocus","destroy","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","host","tabindex","aria-modal","[attr.role]","[attr.aria-labelledby]","[attr.aria-label]","[attr.aria-describedby]","Optional","type","Inject","DOCUMENT","FocusTrapFactory","ElementRef","SharePopupService","_overlay","_injector","open","config","_overlayRef","hasAttached","backdropClass","hasBackdrop","panelClass","positionStrategy","position","global","centerHorizontally","centerVertically","scrollStrategy","scrollStrategies","block","disposeOnNavigation","popupComponentPortal","ComponentPortal","createInjector","attach","instance","backdropClick","subscribe","close","detach","dataToPass","injectorTokens","WeakMap","set","PortalInjector","Injectable","Overlay","Injector","SharePopupButtonsDirective","_sharePopup","_share","theme","include","keys","SHARE_BUTTONS","closeIcon","showIcon","showText","size","opened","EventEmitter","closed","popupClosed","_popupClosed","onClick","e","url","title","description","image","tags","autoSetMeta","show","disabled","closeClick","unsubscribe","Directive","ShareService","Input","Output","HostListener","icon","text","ShareButtonsPopupModule","withConfig","ngModule","ShareButtonsModule","providers","provide","SHARE_BUTTONS_CONFIG","useValue","NgModule","declarations","SharePopupComponent","imports","CommonModule","FontAwesomeModule","exports"],"mappings":"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","sourcesContent":["import { EventEmitter, InjectionToken } from '@angular/core';\n\nexport interface SharePopupOptions {\n  show: number;\n  theme: string;\n  include: string[];\n  exclude: string[];\n  url: string;\n  title: string;\n  description: string;\n  image: string;\n  tags: string;\n  autoSetMeta: boolean;\n  showIcon: boolean;\n  showText: boolean;\n  size: number;\n  disabled: boolean;\n  opened: EventEmitter<string>;\n  closed: EventEmitter<string>;\n  closeIcon?: string | string[];\n  closeClick: EventEmitter<void>;\n  hasBackdrop?: boolean;\n  backdropClass?: string;\n}\n\nexport const SHARE_POPUP_OPTIONS = new InjectionToken<SharePopupOptions>('SHARE_POPUP_OPTIONS');\n","import { Component, ChangeDetectionStrategy, Inject, Optional, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { FocusTrap, FocusTrapFactory } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\n\n@Component({\n  selector: 'share-buttons-popup',\n  templateUrl: './share-buttons-popup.html',\n  styleUrls: ['./share-buttons-popup.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.role]': 'role',\n    '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',\n    '[attr.aria-label]': 'ariaLabel',\n    '[attr.aria-describedby]': 'ariaDescribedBy || null'\n  }\n})\nexport class ShareButtonsPopup implements AfterViewInit, OnDestroy {\n\n  /** Overlay ref to close the lightbox */\n  overlayRef: OverlayRef;\n\n  /** The ARIA role of the lightbox element. */\n  role: string;\n\n  /** Aria label to assign to the lightbox element */\n  ariaLabel: string;\n\n  /** ID of the element that should be considered as the lightbox's label. */\n  ariaLabelledBy: string;\n\n  /** ID of the element that describes the lightbox. */\n  ariaDescribedBy: string;\n\n  /** The class that traps and manages focus within the lightbox. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the lightbox was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement;\n\n  get isBtnCopy(): boolean {\n    return this.options.exclude && this.options.exclude.filter((btn: string) => btn === 'copy').length > 0;\n  }\n\n  constructor(@Optional() @Inject(DOCUMENT) private _document: any,\n              @Optional() @Inject(SHARE_POPUP_OPTIONS) public options: SharePopupOptions,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _elementRef: ElementRef) {\n    this._savePreviouslyFocusedElement();\n  }\n\n  ngAfterViewInit() {\n    this._trapFocus();\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  ngOnDestroy() {\n    this.overlayRef.dispose();\n    this._restoreFocus();\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n    // If were to attempt to focus immediately, then the content of the lightbox would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Saves a reference to the element that was focused before the lightbox was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the lightbox immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Restores focus to the element that was focused before the lightbox opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n}\n","import { ComponentRef, Injectable, Injector } from '@angular/core';\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\nimport { ComponentPortal, PortalInjector } from '@angular/cdk/portal';\nimport { ShareButtonsPopup } from './share-buttons-popup';\nimport { SHARE_POPUP_OPTIONS, SharePopupOptions } from './share-buttons-popup.model';\n\n@Injectable()\nexport class SharePopupService {\n\n  private _overlayRef: OverlayRef;\n\n  constructor(private _overlay: Overlay, private _injector: Injector) {\n  }\n\n  open(config?: SharePopupOptions) {\n    if (!this._overlayRef || !this._overlayRef.hasAttached()) {\n      this._overlayRef = this._overlay.create({\n        backdropClass: 'sb-backdrop',\n        hasBackdrop: true,\n        panelClass: '',\n        positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n        scrollStrategy: this._overlay.scrollStrategies.block(),\n        disposeOnNavigation: true\n      });\n      const popupComponentPortal = new ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));\n      const sharePopupRef: ComponentRef<ShareButtonsPopup> = this._overlayRef.attach(popupComponentPortal);\n      sharePopupRef.instance.overlayRef = this._overlayRef;\n\n      if (config.hasBackdrop) {\n        this._overlayRef.backdropClick().subscribe(() => this.close());\n      }\n    }\n  }\n\n  /**\n   * Close Share Popup Overlay\n   */\n  close() {\n    if (this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n  }\n\n  private createInjector(dataToPass: SharePopupOptions): PortalInjector {\n    const injectorTokens = new WeakMap();\n    injectorTokens.set(SHARE_POPUP_OPTIONS, dataToPass);\n    return new PortalInjector(this._injector, injectorTokens);\n  }\n\n}\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, Output } from '@angular/core';\nimport { SharePopupService } from './share-popup.service';\n\n// import { ShareService, SHARE_BUTTONS } from '../../src/public-api';\nimport { ShareService, SHARE_BUTTONS } from 'ngx-sharebuttons';\n\n@Directive({\n  selector: '[shareButtonsPopup]'\n})\nexport class SharePopupButtonsDirective implements OnDestroy {\n\n  @Input() theme: string = this._share.config.theme;\n\n  @Input() include: string[] = Object.keys(SHARE_BUTTONS);\n\n  @Input() exclude!: string[];\n\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\n\n  /** The sharing link */\n  @Input() url: string;\n\n  /** The title parameter */\n  @Input() title: string;\n\n  /** The description parameter */\n  @Input() description: string;\n\n  /** The image parameter for sharing on Pinterest */\n  @Input() image: string;\n\n  /** The tags parameter for sharing on Twitter and Tumblr */\n  @Input() tags: string;\n\n  /** Sets meta tags from document head, useful when SEO is available */\n  @Input() autoSetMeta: boolean;\n\n  @Input() show: number;\n\n  /** Show buttons icons */\n  @Input() showIcon = true;\n\n  /** Show buttons text */\n  @Input() showText = false;\n\n  /** Buttons size */\n  @Input() size = 0;\n\n  /** A flag that indicates if the button's click is disabled */\n  @Input() disabled: boolean;\n\n  @Input() hasBackdrop = true;\n\n  @Input() backdropClass: string;\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  // Stream that emits when the share popup is closed\n  @Output() popupClosed = new EventEmitter<void>();\n\n  private _popupClosed = this.popupClosed.subscribe(() => this.close());\n\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\n  }\n\n  @HostListener('click', ['$event']) onClick(e) {\n    this._sharePopup.open({\n      theme: this.theme,\n      include: this.include,\n      exclude: this.exclude,\n      url: this.url,\n      title: this.title,\n      description: this.description,\n      image: this.image,\n      tags: this.tags,\n      autoSetMeta: this.autoSetMeta,\n      show: this.show,\n      showIcon: this.showIcon,\n      showText: this.showText,\n      size: this.size,\n      disabled: this.disabled,\n      opened: this.opened,\n      closed: this.closed,\n      closeIcon: this.closeIcon,\n      closeClick: this.popupClosed,\n      hasBackdrop: this.hasBackdrop,\n      backdropClass: this.backdropClass\n    });\n  }\n\n  ngOnDestroy() {\n    this._popupClosed.unsubscribe();\n  }\n\n  close() {\n    this._sharePopup.close();\n  }\n}\n","import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { SharePopupService } from './share-popup.service';\n\n// import { ShareService } from '../../src/public-api';\nimport { ShareService } from 'ngx-sharebuttons';\n\n@Component({\n  selector: 'share-popup-button',\n  template: `\n    <div class=\"sb-button sb-{{theme}}\">\n      <button shareButtonsPopup\n              class=\"sb-wrapper\"\n              [theme]=\"theme\"\n              [include]=\"include\"\n              [exclude]=\"exclude\"\n              [show]=\"show\"\n              [url]=\"url\"\n              [showIcon]=\"showIcon\"\n              [showText]=\"showText\"\n              [size]=\"size\"\n              [tags]=\"tags\"\n              [autoSetMeta]=\"autoSetMeta\"\n              [title]=\"title\"\n              [description]=\"description\"\n              [image]=\"image\"\n              (closed)=\"closed.emit($event)\"\n              (opened)=\"opened.emit($event)\">\n        <div class=\"sb-content\">\n\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <fa-icon [icon]=\"icon\" [fixedWidth]=\"true\"></fa-icon>\n          </div>\n\n          <div *ngIf=\"showText\" class=\"sb-text\">\n            {{ text }}\n          </div>\n\n        </div>\n      </button>\n    </div>\n  `,\n  styleUrls: ['./share-popup.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SharePopupComponent {\n\n  @Input() theme: string = this._share.config.theme;\n\n  @Input() icon: string | string[] = ['fas', 'share'];\n\n  @Input() text: string = 'Share';\n\n  @Input() include!: string[];\n\n  @Input() exclude!: string[];\n\n  @Input() closeIcon: string | string[] = ['fas', 'times-circle'];\n\n  /** The sharing link */\n  @Input() url: string;\n\n  /** The title parameter */\n  @Input() title: string;\n\n  /** The description parameter */\n  @Input() description: string;\n\n  /** The image parameter for sharing on Pinterest */\n  @Input() image: string;\n\n  /** The tags parameter for sharing on Twitter and Tumblr */\n  @Input() tags: string;\n\n  /** Sets meta tags from document head, useful when SEO is available */\n  @Input() autoSetMeta: boolean;\n\n  @Input() show: number;\n\n  /** Show buttons icons */\n  @Input() showIcon = true;\n\n  /** Show buttons text */\n  @Input() showText = false;\n\n  /** Buttons size */\n  @Input() size = 0;\n\n  /** A flag that indicates if the button's click is disabled */\n  @Input() disabled: boolean;\n\n  @Input() hasBackdrop = true;\n\n  @Input() backdropClass: string;\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  // Stream that emits when the share popup is closed\n  @Output() popupClosed = new EventEmitter<void>();\n\n  constructor(private _sharePopup: SharePopupService, private _share: ShareService) {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// import { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from '../../src/public-api';\n// import { ShareButtonsModule } from '../../buttons/src/public_api';\n// Uncomment the following in development mode\nimport { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';\nimport { ShareButtonsModule } from 'ngx-sharebuttons/buttons';\n\nimport { ShareButtonsPopup } from './share-buttons-popup';\nimport { SharePopupService } from './share-popup.service';\nimport { SharePopupButtonsDirective } from './share-popup-buttons.directive';\nimport { SharePopupComponent } from './share-popup.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n@NgModule({\n  declarations: [\n    ShareButtonsPopup,\n    SharePopupButtonsDirective,\n    SharePopupComponent\n  ],\n  imports: [\n    CommonModule,\n    ShareButtonsModule,\n    FontAwesomeModule\n  ],\n  exports: [\n    ShareButtonsModule,\n    ShareButtonsPopup,\n    SharePopupButtonsDirective,\n    SharePopupComponent\n  ],\n  providers: [\n    SharePopupService\n  ]\n})\nexport class ShareButtonsPopupModule {\n  static withConfig(config?: ShareButtonsConfig): ModuleWithProviders<ShareButtonsModule> {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [{provide: SHARE_BUTTONS_CONFIG, useValue: config}]\n    };\n  }\n}\n"]}