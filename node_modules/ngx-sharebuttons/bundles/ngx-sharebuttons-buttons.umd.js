(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-sharebuttons'), require('ngx-sharebuttons/button'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-sharebuttons/buttons', ['exports', '@angular/core', '@angular/common', 'ngx-sharebuttons', 'ngx-sharebuttons/button', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-sharebuttons'] = global['ngx-sharebuttons'] || {}, global['ngx-sharebuttons'].buttons = {}), global.ng.core, global.ng.common, global['ngx-sharebuttons'], global['ngx-sharebuttons'].button, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, common, ngxSharebuttons, button, rxjs, operators) { 'use strict';

    var ShareButtons = /** @class */ (function () {
        function ShareButtons(_share) {
            this._share = _share;
            this._state$ = new rxjs.BehaviorSubject({
                includedButtons: [],
                excludedButtons: [],
                userButtons: [],
                selectedButtons: [],
                expanded: true,
                shownCount: Object.keys(ngxSharebuttons.SHARE_BUTTONS).length
            });
            this._configSub$ = rxjs.Subscription.EMPTY;
            this.theme = this._share.config.theme;
            /** Show buttons icons */
            this.showIcon = true;
            /** Show buttons text */
            this.showText = false;
            /** Buttons size */
            this.size = 0;
            /** Share dialog opened event */
            this.opened = new core.EventEmitter();
            /** Share dialog closed event */
            this.closed = new core.EventEmitter();
        }
        ShareButtons.prototype.ngOnInit = function () {
            var _this = this;
            this.state$ = this._state$.pipe(operators.map(function (state) {
                // Use component include buttons, otherwise fallback to global include buttons
                var includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
                var userButtons = state.excludedButtons ? includedButtons.filter(function (btn) { return state.excludedButtons.indexOf(btn) < 0; }) : includedButtons;
                var selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
                return {
                    userButtons: userButtons,
                    selectedButtons: selectedButtons,
                    expanded: state.expanded,
                    shownCount: state.shownCount,
                    moreIcon: state.moreIcon,
                    lessIcon: state.lessIcon
                };
            }));
            // Subscribe to share buttons config changes, This updates the component whenever a new button is added
            this._configSub$ = this._share.config$.subscribe(function (config) {
                // Use global include buttons, otherwise fallback to all buttons
                var includedButtons = config.include.length ? config.include : Object.keys(ngxSharebuttons.SHARE_BUTTONS);
                var userButtons = includedButtons.filter(function (btn) { return config.exclude.indexOf(btn) < 0; });
                _this.updateState({
                    userButtons: userButtons,
                    expanded: false,
                    moreIcon: config.moreButtonIcon,
                    lessIcon: config.lessButtonIcon
                });
            });
        };
        ShareButtons.prototype.ngOnChanges = function (changes) {
            var shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
                (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
                (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
            if (shouldUpdate) {
                this.updateState({
                    includedButtons: this.include,
                    excludedButtons: this.exclude,
                    shownCount: this.show
                });
            }
        };
        ShareButtons.prototype.ngOnDestroy = function () {
            this._configSub$.unsubscribe();
            this._state$.complete();
        };
        ShareButtons.prototype.updateState = function (state) {
            this._state$.next(Object.assign(Object.assign({}, this._state$.value), state));
        };
        return ShareButtons;
    }());
    ShareButtons.decorators = [
        { type: core.Component, args: [{
                    selector: 'share-buttons',
                    template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [size]=\"(1 + size/20) * 14\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{--sb-margin:0.3125em;display:inherit}"]
                },] }
    ];
    ShareButtons.ctorParameters = function () { return [
        { type: ngxSharebuttons.ShareService }
    ]; };
    ShareButtons.propDecorators = {
        theme: [{ type: core.Input }],
        include: [{ type: core.Input }],
        exclude: [{ type: core.Input }],
        show: [{ type: core.Input }],
        url: [{ type: core.Input }],
        title: [{ type: core.Input }],
        description: [{ type: core.Input }],
        image: [{ type: core.Input }],
        tags: [{ type: core.Input }],
        autoSetMeta: [{ type: core.Input }],
        showIcon: [{ type: core.Input }],
        showText: [{ type: core.Input }],
        size: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        opened: [{ type: core.Output }],
        closed: [{ type: core.Output }]
    };
    /**
     * Explanation of the above code:
     * ------------------------------
     Include buttons: includes only wanted buttons and excludes the rest
     Exclude buttons: excludes only the unwanted buttons
     User buttons = Include buttons - exclude buttons
     Selected Buttons = User buttons [shown number]
     */

    var ExpandButton = /** @class */ (function () {
        function ExpandButton(el) {
            this.toggle = new core.EventEmitter();
            el.nativeElement.style.setProperty('--button-color', '#FF6651');
        }
        return ExpandButton;
    }());
    ExpandButton.decorators = [
        { type: core.Component, args: [{
                    selector: 'expand-button',
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    template: "\n    <button class=\"sb-wrapper sb-expand sb-show-icon\"\n            [style.fontSize.px]=\"size\"\n            (click)=\"toggle.emit(!expanded)\">\n\n      <div class=\"sb-content\">\n        <div class=\"sb-icon\">\n          <fa-icon [icon]=\"expanded ? lessIcon : moreIcon\"></fa-icon>\n        </div>\n      </div>\n    </button>\n  "
                },] }
    ];
    ExpandButton.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    ExpandButton.propDecorators = {
        moreIcon: [{ type: core.Input }],
        lessIcon: [{ type: core.Input }],
        expanded: [{ type: core.Input }],
        size: [{ type: core.Input }],
        toggle: [{ type: core.Output }]
    };

    var ShareButtonsModule = /** @class */ (function () {
        function ShareButtonsModule() {
        }
        ShareButtonsModule.withConfig = function (config) {
            return {
                ngModule: ShareButtonsModule,
                providers: [{ provide: ngxSharebuttons.SHARE_BUTTONS_CONFIG, useValue: config }]
            };
        };
        return ShareButtonsModule;
    }());
    ShareButtonsModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ShareButtons,
                        ExpandButton
                    ],
                    imports: [
                        button.ShareButtonModule,
                        common.CommonModule
                    ],
                    exports: [
                        button.ShareButtonModule,
                        ShareButtons
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ShareButtons = ShareButtons;
    exports.ShareButtonsModule = ShareButtonsModule;
    exports.Éµa = ExpandButton;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-sharebuttons-buttons.umd.js.map
