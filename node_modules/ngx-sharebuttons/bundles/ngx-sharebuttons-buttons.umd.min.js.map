{"version":3,"sources":["../../../projects/ngx-sharebuttons/buttons/src/share-buttons.ts","../../../projects/ngx-sharebuttons/buttons/src/expand-button.ts","../../../projects/ngx-sharebuttons/buttons/src/share-buttons.module.ts"],"names":["ShareButtons","_share","this","_state$","BehaviorSubject","includedButtons","excludedButtons","userButtons","selectedButtons","expanded","shownCount","Object","keys","SHARE_BUTTONS","length","_configSub$","Subscription","EMPTY","theme","config","showIcon","showText","size","opened","EventEmitter","closed","prototype","ngOnInit","_this","state$","pipe","map","state","filter","btn","indexOf","slice","moreIcon","lessIcon","config$","subscribe","include","exclude","updateState","moreButtonIcon","lessButtonIcon","ngOnChanges","changes","currentValue","previousValue","show","ngOnDestroy","unsubscribe","complete","next","assign","value","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ShareService","Input","Output","el","toggle","nativeElement","style","setProperty","ElementRef","ShareButtonsModule","withConfig","ngModule","providers","provide","SHARE_BUTTONS_CONFIG","useValue","NgModule","declarations","ExpandButton","imports","ShareButtonModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  OnChanges,\n  OnDestroy,\n  EventEmitter,\n  SimpleChanges,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { ShareService, ShareButtonsConfig, SHARE_BUTTONS } from 'ngx-sharebuttons';\n// Uncomment the following line in development mode\n// import { ShareService, ShareButtonsConfig, SHARE_BUTTONS } from '../../src/public-api';\n\ninterface ButtonsState {\n  includedButtons?: string[];\n  excludedButtons?: string[];\n  userButtons?: string[];\n  selectedButtons?: string[];\n  expanded?: boolean;\n  shownCount?: number;\n  moreIcon?: any;\n  lessIcon?: any;\n}\n\n@Component({\n  selector: 'share-buttons',\n  templateUrl: './share-buttons.html',\n  styleUrls: ['./share-buttons.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareButtons implements OnInit, OnChanges, OnDestroy {\n\n  state$: Observable<ButtonsState>;\n  private _state$ = new BehaviorSubject<ButtonsState>({\n    includedButtons: [],\n    excludedButtons: [],\n    userButtons: [],\n    selectedButtons: [],\n    expanded: true,\n    shownCount: Object.keys(SHARE_BUTTONS).length\n  });\n\n  private _configSub$ = Subscription.EMPTY;\n\n  @Input() theme = this._share.config.theme;\n\n  /** Array of included buttons */\n  @Input() include: string[];\n\n  /** Array of excluded buttons */\n  @Input() exclude: string[];\n\n  /** Numbers of buttons to show */\n  @Input() show: number;\n\n  /** The sharing link */\n  @Input() url: string;\n\n  /** The title parameter */\n  @Input() title: string;\n\n  /** The description parameter */\n  @Input() description: string;\n\n  /** The image parameter for sharing on Pinterest */\n  @Input() image: string;\n\n  /** The tags parameter for sharing on Twitter and Tumblr */\n  @Input() tags: string;\n\n  /** Sets meta tags from document head, useful when SEO is available */\n  @Input() autoSetMeta: boolean;\n\n  /** Show buttons icons */\n  @Input() showIcon = true;\n\n  /** Show buttons text */\n  @Input() showText = false;\n\n  /** Buttons size */\n  @Input() size = 0;\n\n  /** A flag that indicates if the button's click is disabled */\n  @Input() disabled: boolean;\n\n  /** Share dialog opened event */\n  @Output() opened = new EventEmitter<string>();\n\n  /** Share dialog closed event */\n  @Output() closed = new EventEmitter<string>();\n\n  constructor(private _share: ShareService) {\n  }\n\n  ngOnInit() {\n    this.state$ = this._state$.pipe(\n      map((state: ButtonsState) => {\n        // Use component include buttons, otherwise fallback to global include buttons\n        const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;\n        const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;\n        const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);\n        return {\n          userButtons,\n          selectedButtons,\n          expanded: state.expanded,\n          shownCount: state.shownCount,\n          moreIcon: state.moreIcon,\n          lessIcon: state.lessIcon\n        };\n      })\n    );\n\n    // Subscribe to share buttons config changes, This updates the component whenever a new button is added\n    this._configSub$ = this._share.config$.subscribe((config: ShareButtonsConfig) => {\n      // Use global include buttons, otherwise fallback to all buttons\n      const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);\n      const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);\n      this.updateState({\n        userButtons,\n        expanded: false,\n        moreIcon: config.moreButtonIcon,\n        lessIcon: config.lessButtonIcon\n      });\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const shouldUpdate =\n      (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||\n      (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||\n      (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);\n\n    if (shouldUpdate) {\n      this.updateState({\n        includedButtons: this.include,\n        excludedButtons: this.exclude,\n        shownCount: this.show\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._configSub$.unsubscribe();\n    this._state$.complete();\n  }\n\n  updateState(state: ButtonsState) {\n    this._state$.next({...this._state$.value, ...state});\n  }\n\n}\n\n/**\n * Explanation of the above code:\n * ------------------------------\n Include buttons: includes only wanted buttons and excludes the rest\n Exclude buttons: excludes only the unwanted buttons\n User buttons = Include buttons - exclude buttons\n Selected Buttons = User buttons [shown number]\n */\n","import { Component, Input, Output, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'expand-button',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <button class=\"sb-wrapper sb-expand sb-show-icon\"\n            [style.fontSize.px]=\"size\"\n            (click)=\"toggle.emit(!expanded)\">\n\n      <div class=\"sb-content\">\n        <div class=\"sb-icon\">\n          <fa-icon [icon]=\"expanded ? lessIcon : moreIcon\"></fa-icon>\n        </div>\n      </div>\n    </button>\n  `\n})\nexport class ExpandButton {\n\n  @Input() moreIcon: any;\n  @Input() lessIcon: any;\n  @Input() expanded: string;\n  @Input() size: number;\n  @Output() toggle = new EventEmitter<boolean>();\n\n  constructor(el: ElementRef) {\n    el.nativeElement.style.setProperty('--button-color', '#FF6651');\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// import { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from '../../src/public-api';\n// import { ShareButtonModule } from '../../button/src/public_api';\n// Uncomment the following in development mode\nimport { ShareButtonsConfig, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';\nimport { ShareButtonModule } from 'ngx-sharebuttons/button';\n\nimport { ShareButtons } from './share-buttons';\nimport { ExpandButton } from './expand-button';\n\n@NgModule({\n  declarations: [\n    ShareButtons,\n    ExpandButton\n  ],\n  imports: [\n    ShareButtonModule,\n    CommonModule\n  ],\n  exports: [\n    ShareButtonModule,\n    ShareButtons\n  ]\n})\nexport class ShareButtonsModule {\n  static withConfig(config?: ShareButtonsConfig): ModuleWithProviders<ShareButtonsModule> {\n    return {\n      ngModule: ShareButtonsModule,\n      providers: [{provide: SHARE_BUTTONS_CONFIG, useValue: config}]\n    };\n  }\n}\n"]}