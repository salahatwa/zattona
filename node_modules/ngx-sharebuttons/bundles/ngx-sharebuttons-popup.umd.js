(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('ngx-sharebuttons'), require('ngx-sharebuttons/buttons'), require('@angular/cdk/a11y'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('@fortawesome/angular-fontawesome')) :
    typeof define === 'function' && define.amd ? define('ngx-sharebuttons/popup', ['exports', '@angular/core', '@angular/common', 'ngx-sharebuttons', 'ngx-sharebuttons/buttons', '@angular/cdk/a11y', '@angular/cdk/overlay', '@angular/cdk/portal', '@fortawesome/angular-fontawesome'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-sharebuttons'] = global['ngx-sharebuttons'] || {}, global['ngx-sharebuttons'].popup = {}), global.ng.core, global.ng.common, global['ngx-sharebuttons'], global['ngx-sharebuttons'].buttons, global.ng.cdk.a11y, global.ng.cdk.overlay, global.ng.cdk.portal, global.angularFontawesome));
}(this, (function (exports, core, common, ngxSharebuttons, buttons, a11y, overlay, portal, angularFontawesome) { 'use strict';

    var SHARE_POPUP_OPTIONS = new core.InjectionToken('SHARE_POPUP_OPTIONS');

    var ShareButtonsPopup = /** @class */ (function () {
        function ShareButtonsPopup(_document, options, _focusTrapFactory, _elementRef) {
            this._document = _document;
            this.options = options;
            this._focusTrapFactory = _focusTrapFactory;
            this._elementRef = _elementRef;
            this._savePreviouslyFocusedElement();
        }
        Object.defineProperty(ShareButtonsPopup.prototype, "isBtnCopy", {
            get: function () {
                return this.options.exclude && this.options.exclude.filter(function (btn) { return btn === 'copy'; }).length > 0;
            },
            enumerable: false,
            configurable: true
        });
        ShareButtonsPopup.prototype.ngAfterViewInit = function () {
            this._trapFocus();
        };
        /** Callback, invoked whenever an animation on the host completes. */
        ShareButtonsPopup.prototype.ngOnDestroy = function () {
            this.overlayRef.dispose();
            this._restoreFocus();
        };
        /** Moves the focus inside the focus trap. */
        ShareButtonsPopup.prototype._trapFocus = function () {
            if (!this._focusTrap) {
                this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
            }
            // If were to attempt to focus immediately, then the content of the lightbox would not yet be
            // ready in instances where change detection has to run first. To deal with this, we simply
            // wait for the microtask queue to be empty.
            this._focusTrap.focusInitialElementWhenReady();
        };
        /** Saves a reference to the element that was focused before the lightbox was opened. */
        ShareButtonsPopup.prototype._savePreviouslyFocusedElement = function () {
            var _this = this;
            if (this._document) {
                this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;
                // Note that there is no focus method when rendering on the server.
                if (this._elementRef.nativeElement.focus) {
                    // Move focus onto the lightbox immediately in order to prevent the user from accidentally
                    // opening multiple dialogs at the same time. Needs to be async, because the element
                    // may not be focusable immediately.
                    Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });
                }
            }
        };
        /** Restores focus to the element that was focused before the lightbox opened. */
        ShareButtonsPopup.prototype._restoreFocus = function () {
            var toFocus = this._elementFocusedBeforeDialogWasOpened;
            // We need the extra check, because IE can set the `activeElement` to null in some cases.
            if (toFocus && typeof toFocus.focus === 'function') {
                toFocus.focus();
            }
            if (this._focusTrap) {
                this._focusTrap.destroy();
            }
        };
        return ShareButtonsPopup;
    }());
    ShareButtonsPopup.decorators = [
        { type: core.Component, args: [{
                    selector: 'share-buttons-popup',
                    template: "<div class=\"sb-overlay\">\n  <h3>Share</h3>\n  <div *ngIf=\"isBtnCopy\" #shareButton=\"shareButton\" shareButton=\"copy\" class=\"sb-copy-url\">\n    <span>{{ shareButton?.url }}</span>\n  </div>\n\n  <share-buttons [include]=\"options?.include\"\n                 [exclude]=\"options?.exclude\"\n                 [theme]=\"options?.theme\"\n                 [url]=\"options?.url\"\n                 [title]=\"options?.title\"\n                 [description]=\"options?.description\"\n                 [image]=\"options?.image\"\n                 [tags]=\"options?.tags\"\n                 [autoSetMeta]=\"options?.autoSetMeta\"\n                 [show]=\"options?.show\"\n                 [showIcon]=\"options?.showIcon\"\n                 [showText]=\"options?.showText\"\n                 [size]=\"options?.size\"\n                 (opened)=\"options?.opened?.emit($event)\"\n                 (closed)=\"options?.closed?.emit($event)\"\n                 [disabled]=\"options?.disabled\">\n  </share-buttons>\n\n  <div class=\"sb-close-overlay\" (click)=\"options.closeClick.emit()\">\n    <fa-icon [icon]=\"options.closeIcon\"></fa-icon>\n  </div>\n\n</div>\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    host: {
                        'tabindex': '-1',
                        'aria-modal': 'true',
                        '[attr.role]': 'role',
                        '[attr.aria-labelledby]': 'ariaLabel ? null : ariaLabelledBy',
                        '[attr.aria-label]': 'ariaLabel',
                        '[attr.aria-describedby]': 'ariaDescribedBy || null'
                    },
                    styles: [".sb-close-overlay,:host{align-items:center;display:flex;justify-content:center}h3{margin:5px;position:absolute;top:5px}.sb-overlay{display:flex;flex-direction:column;max-height:100%;max-width:100%;padding:1em;position:relative;width:300px}::ng-deep share-buttons-popup{background:#fff;border-radius:16px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12);display:block;max-height:90vh;max-width:94vw;position:relative}::ng-deep share-buttons-popup:focus{outline:none}::ng-deep share-buttons-popup share-buttons{display:block;height:100%;margin-top:30px;width:100%}::ng-deep .sb-backdrop{background-color:rgba(0,0,0,.32)}::ng-deep .fullscreen{width:100%}::ng-deep .fullscreen ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}::ng-deep .sb-overlay{margin:auto}@media only screen and (max-width:480px){::ng-deep .sb-overlay{width:100%}::ng-deep .sb-overlay ::ng-deep share-buttons-popup{border-radius:0;bottom:0;height:100%;left:0;max-height:unset;max-width:unset;position:fixed;right:0;top:0;width:100%}}::ng-deep .sb-overlay .sb-button{flex:1}::ng-deep .sb-overlay .sb-wrapper{width:100%}::ng-deep .sb-overlay .sb-wrapper .sb-icon{flex:1}::ng-deep .sb-overlay .sb-wrapper .sb-text{flex:2}::ng-deep .sb-close-overlay{color:#2e4057;cursor:pointer;font-size:20px;height:40px;margin:5px;position:absolute;right:0;top:0;width:40px;z-index:60}@media only screen and (max-width:480px){::ng-deep .sb-close-overlay{margin:2px}}"]
                },] }
    ];
    ShareButtonsPopup.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [SHARE_POPUP_OPTIONS,] }] },
        { type: a11y.FocusTrapFactory },
        { type: core.ElementRef }
    ]; };

    var SharePopupService = /** @class */ (function () {
        function SharePopupService(_overlay, _injector) {
            this._overlay = _overlay;
            this._injector = _injector;
        }
        SharePopupService.prototype.open = function (config) {
            var _this = this;
            if (!this._overlayRef || !this._overlayRef.hasAttached()) {
                this._overlayRef = this._overlay.create({
                    backdropClass: 'sb-backdrop',
                    hasBackdrop: true,
                    panelClass: '',
                    positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
                    scrollStrategy: this._overlay.scrollStrategies.block(),
                    disposeOnNavigation: true
                });
                var popupComponentPortal = new portal.ComponentPortal(ShareButtonsPopup, null, this.createInjector(config));
                var sharePopupRef = this._overlayRef.attach(popupComponentPortal);
                sharePopupRef.instance.overlayRef = this._overlayRef;
                if (config.hasBackdrop) {
                    this._overlayRef.backdropClick().subscribe(function () { return _this.close(); });
                }
            }
        };
        /**
         * Close Share Popup Overlay
         */
        SharePopupService.prototype.close = function () {
            if (this._overlayRef.hasAttached()) {
                this._overlayRef.detach();
            }
        };
        SharePopupService.prototype.createInjector = function (dataToPass) {
            var injectorTokens = new WeakMap();
            injectorTokens.set(SHARE_POPUP_OPTIONS, dataToPass);
            return new portal.PortalInjector(this._injector, injectorTokens);
        };
        return SharePopupService;
    }());
    SharePopupService.decorators = [
        { type: core.Injectable }
    ];
    SharePopupService.ctorParameters = function () { return [
        { type: overlay.Overlay },
        { type: core.Injector }
    ]; };

    var SharePopupButtonsDirective = /** @class */ (function () {
        function SharePopupButtonsDirective(_sharePopup, _share) {
            var _this = this;
            this._sharePopup = _sharePopup;
            this._share = _share;
            this.theme = this._share.config.theme;
            this.include = Object.keys(ngxSharebuttons.SHARE_BUTTONS);
            this.closeIcon = ['fas', 'times-circle'];
            /** Show buttons icons */
            this.showIcon = true;
            /** Show buttons text */
            this.showText = false;
            /** Buttons size */
            this.size = 0;
            this.hasBackdrop = true;
            /** Share dialog opened event */
            this.opened = new core.EventEmitter();
            /** Share dialog closed event */
            this.closed = new core.EventEmitter();
            // Stream that emits when the share popup is closed
            this.popupClosed = new core.EventEmitter();
            this._popupClosed = this.popupClosed.subscribe(function () { return _this.close(); });
        }
        SharePopupButtonsDirective.prototype.onClick = function (e) {
            this._sharePopup.open({
                theme: this.theme,
                include: this.include,
                exclude: this.exclude,
                url: this.url,
                title: this.title,
                description: this.description,
                image: this.image,
                tags: this.tags,
                autoSetMeta: this.autoSetMeta,
                show: this.show,
                showIcon: this.showIcon,
                showText: this.showText,
                size: this.size,
                disabled: this.disabled,
                opened: this.opened,
                closed: this.closed,
                closeIcon: this.closeIcon,
                closeClick: this.popupClosed,
                hasBackdrop: this.hasBackdrop,
                backdropClass: this.backdropClass
            });
        };
        SharePopupButtonsDirective.prototype.ngOnDestroy = function () {
            this._popupClosed.unsubscribe();
        };
        SharePopupButtonsDirective.prototype.close = function () {
            this._sharePopup.close();
        };
        return SharePopupButtonsDirective;
    }());
    SharePopupButtonsDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[shareButtonsPopup]'
                },] }
    ];
    SharePopupButtonsDirective.ctorParameters = function () { return [
        { type: SharePopupService },
        { type: ngxSharebuttons.ShareService }
    ]; };
    SharePopupButtonsDirective.propDecorators = {
        theme: [{ type: core.Input }],
        include: [{ type: core.Input }],
        exclude: [{ type: core.Input }],
        closeIcon: [{ type: core.Input }],
        url: [{ type: core.Input }],
        title: [{ type: core.Input }],
        description: [{ type: core.Input }],
        image: [{ type: core.Input }],
        tags: [{ type: core.Input }],
        autoSetMeta: [{ type: core.Input }],
        show: [{ type: core.Input }],
        showIcon: [{ type: core.Input }],
        showText: [{ type: core.Input }],
        size: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        hasBackdrop: [{ type: core.Input }],
        backdropClass: [{ type: core.Input }],
        opened: [{ type: core.Output }],
        closed: [{ type: core.Output }],
        popupClosed: [{ type: core.Output }],
        onClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
    };

    var SharePopupComponent = /** @class */ (function () {
        function SharePopupComponent(_sharePopup, _share) {
            this._sharePopup = _sharePopup;
            this._share = _share;
            this.theme = this._share.config.theme;
            this.icon = ['fas', 'share'];
            this.text = 'Share';
            this.closeIcon = ['fas', 'times-circle'];
            /** Show buttons icons */
            this.showIcon = true;
            /** Show buttons text */
            this.showText = false;
            /** Buttons size */
            this.size = 0;
            this.hasBackdrop = true;
            /** Share dialog opened event */
            this.opened = new core.EventEmitter();
            /** Share dialog closed event */
            this.closed = new core.EventEmitter();
            // Stream that emits when the share popup is closed
            this.popupClosed = new core.EventEmitter();
        }
        return SharePopupComponent;
    }());
    SharePopupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'share-popup-button',
                    template: "\n    <div class=\"sb-button sb-{{theme}}\">\n      <button shareButtonsPopup\n              class=\"sb-wrapper\"\n              [theme]=\"theme\"\n              [include]=\"include\"\n              [exclude]=\"exclude\"\n              [show]=\"show\"\n              [url]=\"url\"\n              [showIcon]=\"showIcon\"\n              [showText]=\"showText\"\n              [size]=\"size\"\n              [tags]=\"tags\"\n              [autoSetMeta]=\"autoSetMeta\"\n              [title]=\"title\"\n              [description]=\"description\"\n              [image]=\"image\"\n              (closed)=\"closed.emit($event)\"\n              (opened)=\"opened.emit($event)\">\n        <div class=\"sb-content\">\n\n          <div *ngIf=\"showIcon\" class=\"sb-icon\">\n            <fa-icon [icon]=\"icon\" [fixedWidth]=\"true\"></fa-icon>\n          </div>\n\n          <div *ngIf=\"showText\" class=\"sb-text\">\n            {{ text }}\n          </div>\n\n        </div>\n      </button>\n    </div>\n  ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [":host{--button-color:#282c34}"]
                },] }
    ];
    SharePopupComponent.ctorParameters = function () { return [
        { type: SharePopupService },
        { type: ngxSharebuttons.ShareService }
    ]; };
    SharePopupComponent.propDecorators = {
        theme: [{ type: core.Input }],
        icon: [{ type: core.Input }],
        text: [{ type: core.Input }],
        include: [{ type: core.Input }],
        exclude: [{ type: core.Input }],
        closeIcon: [{ type: core.Input }],
        url: [{ type: core.Input }],
        title: [{ type: core.Input }],
        description: [{ type: core.Input }],
        image: [{ type: core.Input }],
        tags: [{ type: core.Input }],
        autoSetMeta: [{ type: core.Input }],
        show: [{ type: core.Input }],
        showIcon: [{ type: core.Input }],
        showText: [{ type: core.Input }],
        size: [{ type: core.Input }],
        disabled: [{ type: core.Input }],
        hasBackdrop: [{ type: core.Input }],
        backdropClass: [{ type: core.Input }],
        opened: [{ type: core.Output }],
        closed: [{ type: core.Output }],
        popupClosed: [{ type: core.Output }]
    };

    var ShareButtonsPopupModule = /** @class */ (function () {
        function ShareButtonsPopupModule() {
        }
        ShareButtonsPopupModule.withConfig = function (config) {
            return {
                ngModule: buttons.ShareButtonsModule,
                providers: [{ provide: ngxSharebuttons.SHARE_BUTTONS_CONFIG, useValue: config }]
            };
        };
        return ShareButtonsPopupModule;
    }());
    ShareButtonsPopupModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        ShareButtonsPopup,
                        SharePopupButtonsDirective,
                        SharePopupComponent
                    ],
                    imports: [
                        common.CommonModule,
                        buttons.ShareButtonsModule,
                        angularFontawesome.FontAwesomeModule
                    ],
                    exports: [
                        buttons.ShareButtonsModule,
                        ShareButtonsPopup,
                        SharePopupButtonsDirective,
                        SharePopupComponent
                    ],
                    providers: [
                        SharePopupService
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ShareButtonsPopup = ShareButtonsPopup;
    exports.ShareButtonsPopupModule = ShareButtonsPopupModule;
    exports.ɵb = SHARE_POPUP_OPTIONS;
    exports.ɵc = SharePopupButtonsDirective;
    exports.ɵd = SharePopupService;
    exports.ɵe = SharePopupComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-sharebuttons-popup.umd.js.map
