(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/platform'), require('@angular/cdk/clipboard'), require('@angular/common'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-sharebuttons', ['exports', '@angular/core', '@angular/cdk/platform', '@angular/cdk/clipboard', '@angular/common', '@angular/platform-browser', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-sharebuttons'] = {}, global.ng.core, global.ng.cdk.platform, global.ng.cdk.clipboard, global.ng.common, global.ng.platformBrowser, global.rxjs, global.rxjs.operators));
}(this, (function (exports, i0, platform, clipboard, i2, platformBrowser, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var SHARE_BUTTONS_CONFIG = new i0.InjectionToken('shareButtonsConfig');
    var IShareButton = /** @class */ (function () {
        function IShareButton() {
        }
        return IShareButton;
    }());
    (function (SharerMethod) {
        SharerMethod["Anchor"] = "anchor";
        SharerMethod["Window"] = "window";
    })(exports.SharerMethod || (exports.SharerMethod = {}));

    /**
     * Simple object check.
     */
    function isObject(item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    }
    /**
     * Deep merge two objects.
     */
    function mergeDeep(target) {
        var _a, _b;
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!sources.length) {
            return target;
        }
        var source = sources.shift();
        if (isObject(target) && isObject(source)) {
            for (var key in source) {
                if (isObject(source[key])) {
                    if (!target[key]) {
                        Object.assign(target, (_a = {}, _a[key] = {}, _a));
                    }
                    mergeDeep(target[key], source[key]);
                }
                else {
                    Object.assign(target, (_b = {}, _b[key] = source[key], _b));
                }
            }
        }
        return mergeDeep.apply(void 0, __spread([target], sources));
    }
    /** Returns a valid URL or falls back to current URL */
    function getValidUrl(url, fallbackUrl) {
        if (url) {
            var r = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
            if (r.test(url)) {
                return url;
            }
            console.warn("[ShareButtons]: Sharing link '" + url + "' is invalid!");
        }
        return fallbackUrl;
    }
    function printPage() {
        return new rxjs.Observable(function (sub) { return document.defaultView.print(); });
    }
    function copyToClipboard(_a) {
        var params = _a.params, data = _a.data, clipboard = _a.clipboard, updater = _a.updater;
        return rxjs.of(null).pipe(operators.tap(function () {
            clipboard.copy(params.url);
            // Disable copy button
            updater.next({ icon: data.successIcon, text: data.successText, disabled: true });
        }), operators.delay(data.delay), operators.tap(function () { return updater.next({ icon: data.icon, text: data.text, disabled: false }); }), operators.take(1));
    }

    var ɵ0 = function (p) {
        return p.description ? p.description + "\r\n" + p.url : p.url;
    };
    // Create message body that includes the sharing link used for Email, SMS and WhatsApp buttons
    var linkInDescription = {
        description: ɵ0
    };
    var ɵ1 = {
        text: 'Copy link',
        icon: ['fas', 'link'],
        successText: 'Copied',
        successIcon: ['fas', 'check'],
        delay: 2000
    };
    var SHARE_BUTTONS = {
        facebook: {
            type: 'facebook',
            text: 'Facebook',
            ariaLabel: 'Share on Facebook',
            icon: ['fab', 'facebook-f'],
            color: '#4267B2',
            share: {
                desktop: 'https://www.facebook.com/sharer/sharer.php?'
            },
            params: {
                url: 'u'
            }
        },
        twitter: {
            type: 'twitter',
            text: 'Twitter',
            ariaLabel: 'Share on Twitter',
            icon: ['fab', 'twitter'],
            color: '#00acee',
            share: {
                desktop: 'https://twitter.com/intent/tweet?'
            },
            params: {
                url: 'url',
                description: 'text',
                tags: 'hashtags',
                via: 'via'
            }
        },
        linkedin: {
            type: 'linkedin',
            text: 'LinkedIn',
            ariaLabel: 'Share on LinkedIn',
            icon: ['fab', 'linkedin-in'],
            color: '#006fa6',
            share: {
                desktop: 'https://www.linkedin.com/shareArticle?'
            },
            params: {
                url: 'url',
                title: 'title',
                description: 'summary'
            }
        },
        pinterest: {
            type: 'pinterest',
            text: 'Pinterest',
            ariaLabel: 'Share on Pinterest',
            icon: ['fab', 'pinterest-p'],
            color: '#BD091D',
            share: {
                desktop: 'https://pinterest.com/pin/create/button/?'
            },
            params: {
                url: 'url',
                description: 'description',
                image: 'media'
            }
        },
        reddit: {
            type: 'reddit',
            text: 'Reddit',
            ariaLabel: 'Share on Reddit',
            icon: ['fab', 'reddit-alien'],
            color: '#FF4006',
            share: {
                desktop: 'https://www.reddit.com/submit?'
            },
            params: {
                url: 'url',
                title: 'title'
            }
        },
        tumblr: {
            type: 'tumblr',
            text: 'Tumblr',
            ariaLabel: 'Share on Tumblr',
            icon: ['fab', 'tumblr'],
            color: '#36465D',
            share: {
                desktop: 'https://tumblr.com/widgets/share/tool?'
            },
            params: {
                url: 'canonicalUrl',
                description: 'caption',
                tags: 'tags'
            }
        },
        mix: {
            type: 'mix',
            text: 'Mix',
            ariaLabel: 'Share on Mix',
            icon: ['fab', 'mix'],
            color: '#eb4924',
            share: {
                desktop: 'https://mix.com/add?'
            },
            params: {
                url: 'url'
            }
        },
        viber: {
            type: 'viber',
            text: 'Viber',
            ariaLabel: 'Share on Viber',
            icon: ['fab', 'viber'],
            color: '#665ca7',
            share: {
                android: 'viber://forward?',
                ios: 'viber://forward?'
            },
            params: {
                description: 'text'
            },
            paramsFunc: linkInDescription
        },
        vk: {
            type: 'vk',
            text: 'VKontakte',
            ariaLabel: 'Share on VKontakte',
            icon: ['fab', 'vk'],
            color: '#4C75A3',
            share: {
                desktop: 'https://vk.com/share.php?'
            },
            params: {
                url: 'url'
            }
        },
        telegram: {
            type: 'telegram',
            text: 'Telegram',
            ariaLabel: 'Share on Telegram',
            icon: ['fab', 'telegram-plane'],
            color: '#0088cc',
            share: {
                desktop: 'https://t.me/share/url?'
            },
            params: {
                url: 'url',
                description: 'text'
            }
        },
        messenger: {
            type: 'messenger',
            text: 'Messenger',
            ariaLabel: 'Share on Messenger',
            icon: ['fab', 'facebook-messenger'],
            color: '#0080FF',
            share: {
                android: 'fb-messenger://share/?',
                ios: 'fb-messenger://share/?'
            },
            params: {
                url: 'link'
            }
        },
        whatsapp: {
            type: 'whatsapp',
            text: 'WhatsApp',
            ariaLabel: 'Share on WhatsApp',
            icon: ['fab', 'whatsapp'],
            color: '#25D366',
            share: {
                desktop: 'https://web.whatsapp.com/send?',
                android: 'whatsapp://send?',
                ios: 'https://api.whatsapp.com/send?'
            },
            params: {
                description: 'text'
            },
            paramsFunc: linkInDescription
        },
        xing: {
            type: 'xing',
            text: 'Xing',
            ariaLabel: 'Share on Xing',
            icon: ['fab', 'xing'],
            color: '#006567',
            share: {
                desktop: 'https://www.xing.com/spi/shares/new?'
            },
            params: {
                url: 'url'
            }
        },
        line: {
            type: 'line',
            text: 'Line',
            ariaLabel: 'Share on Line',
            icon: ['fab', 'line'],
            color: '#00b900',
            share: {
                desktop: 'https://social-plugins.line.me/lineit/share?'
            },
            params: {
                url: 'url'
            }
        },
        sms: {
            type: 'sms',
            text: 'SMS',
            ariaLabel: 'Share link via SMS',
            icon: ['fas', 'sms'],
            color: '#20c16c',
            share: {
                desktop: 'sms:?',
                ios: 'sms:&'
            },
            params: {
                description: 'body'
            },
            paramsFunc: linkInDescription
        },
        email: {
            type: 'email',
            text: 'Email',
            ariaLabel: 'Share link via email',
            icon: ['fas', 'envelope'],
            color: '#FF961C',
            share: {
                desktop: 'mailto:?'
            },
            params: {
                title: 'subject',
                description: 'body'
            },
            paramsFunc: linkInDescription
        },
        print: {
            type: 'print',
            text: 'Print',
            ariaLabel: 'Print page',
            icon: ['fas', 'print'],
            color: '#765AA2',
            func: printPage
        },
        copy: {
            type: 'copy',
            text: 'Copy link',
            ariaLabel: 'Copy link',
            icon: ['fas', 'link'],
            color: '#607D8B',
            data: ɵ1,
            func: copyToClipboard
        }
    };

    var ShareService = /** @class */ (function () {
        function ShareService(config, _document) {
            this._document = _document;
            /** Global config that applies on all share buttons in the app */
            this.config = {
                sharerMethod: exports.SharerMethod.Anchor,
                sharerTarget: '_blank',
                windowObj: this._document.defaultView,
                windowFuncName: 'open',
                prop: SHARE_BUTTONS,
                theme: 'default',
                include: [],
                exclude: [],
                size: 0,
                autoSetMeta: true,
                windowWidth: 800,
                windowHeight: 500,
                moreButtonIcon: 'ellipsis-h',
                lessButtonIcon: 'minus'
            };
            /** Stream that emits when config changes */
            this.config$ = new rxjs.BehaviorSubject(this.config);
            if (config) {
                this.setConfig(config);
            }
        }
        Object.defineProperty(ShareService.prototype, "prop", {
            /**
             * Share buttons properties, used to get the text, color and icon of each button.
             */
            get: function () {
                return this.config.prop;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShareService.prototype, "windowSize", {
            get: function () {
                return "width=" + this.config.windowWidth + ", height=" + this.config.windowHeight;
            },
            enumerable: false,
            configurable: true
        });
        ShareService.prototype.setConfig = function (config) {
            this.config = mergeDeep(this.config, config);
            this.config$.next(this.config);
        };
        ShareService.prototype.addButton = function (name, props) {
            var _a;
            this.setConfig({
                prop: (_a = {},
                    _a[name] = props,
                    _a)
            });
        };
        return ShareService;
    }());
    ShareService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShareService_Factory() { return new ShareService(i0.ɵɵinject(SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(i2.DOCUMENT)); }, token: ShareService, providedIn: "root" });
    ShareService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ShareService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [SHARE_BUTTONS_CONFIG,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] }
    ]; };

    var ShareDirective = /** @class */ (function () {
        function ShareDirective(_el, _meta, _platform, _clipboard, _share, _cd, _document) {
            this._meta = _meta;
            this._platform = _platform;
            this._clipboard = _clipboard;
            this._share = _share;
            this._cd = _cd;
            this._document = _document;
            /** Stream that emits when button is destroyed */
            this._destroyed = new rxjs.Subject();
            /** Stream that emit when share button need to be updated */
            this._updater = new rxjs.Subject();
            /** Set meta tags from document head, useful when SEO is supported */
            this.autoSetMeta = this._share.config.autoSetMeta;
            /** Sharing link */
            this.url = this._share.config.url;
            /** Sets the title parameter */
            this.title = this._share.config.title;
            /** Sets the description parameter */
            this.description = this._share.config.description;
            /** Sets the image parameter for sharing on Pinterest */
            this.image = this._share.config.image;
            /** Sets the tags parameter for sharing on Twitter and Tumblr */
            this.tags = this._share.config.tags;
            /** Stream that emits when share dialog is opened */
            this.opened = new i0.EventEmitter();
            /** Stream that emits when share dialog is closed */
            this.closed = new i0.EventEmitter();
            this._el = _el.nativeElement;
        }
        /**
         * Share the link
         */
        ShareDirective.prototype.share = function () {
            // Avoid SSR error
            if (this._platform.isBrowser && this.shareButton) {
                // Prepare sharer url params
                var params = this.autoSetMeta ? this.getParamsFromMetaTags() : this.getParamsFromInputs();
                // Prepare share button click
                var click = this.shareButton.share ? this.open(params) : this.shareButton.func({
                    params: params,
                    data: this.shareButton.data,
                    clipboard: this._clipboard,
                    updater: this._updater
                });
                click.pipe(operators.takeUntil(this._destroyed)).subscribe();
            }
            else {
                console.warn(this.text + " button is not compatible on this Platform");
            }
        };
        ShareDirective.prototype.ngOnInit = function () {
            var _this = this;
            // This stream is mainly used to update the copy button text and icon when it is being clicked
            this._updater.pipe(operators.tap(function (data) {
                _this.icon = data.icon;
                _this.text = data.text;
                _this._el.style.pointerEvents = data.disabled ? 'none' : 'auto';
                _this._cd.markForCheck();
            }), operators.takeUntil(this._destroyed)).subscribe();
        };
        ShareDirective.prototype.ngOnChanges = function (changes) {
            // Avoid SSR error
            if (this._platform.isBrowser) {
                // Create share button
                if (this._shareButtonChanged(changes.shareButtonName)) {
                    this._createShareButton();
                }
                // Prepare share url
                if (this._urlChanged(changes.url)) {
                    this.url = getValidUrl(this.autoSetMeta
                        ? this.url || this._getMetaTagContent('og:url')
                        : this.url, this._document.defaultView.location.href);
                }
            }
        };
        ShareDirective.prototype.ngOnDestroy = function () {
            this._destroyed.next();
            this._destroyed.complete();
        };
        ShareDirective.prototype._createShareButton = function () {
            var button = this._share.config.prop[this.shareButtonName];
            if (button) {
                // Set share button properties
                this.shareButton = button;
                // Remove previous button class
                this._el.classList.remove("sb-" + this._buttonClass);
                // Add new button class
                this._el.classList.add("sb-" + this.shareButtonName);
                // Set button css color variable
                this._el.style.setProperty('--button-color', this.shareButton.color);
                // Keep a copy of the class for future replacement
                this._buttonClass = this.shareButtonName;
                this.color = this.shareButton.color;
                this.text = this.shareButton.text;
                this.icon = this.shareButton.icon;
                // Set aria-label attribute
                this._el.setAttribute('aria-label', button.ariaLabel);
            }
            else {
                console.error("[ShareButtons]: The share button '" + this.shareButtonName + "' does not exist!");
            }
        };
        /**
         * Get meta tag content
         */
        ShareDirective.prototype._getMetaTagContent = function (key) {
            var metaUsingProperty = this._meta.getTag("property=\"" + key + "\"");
            if (metaUsingProperty) {
                return metaUsingProperty.getAttribute('content');
            }
            var metaUsingName = this._meta.getTag("name=\"" + key + "\"");
            if (metaUsingName) {
                return metaUsingName.getAttribute('content');
            }
        };
        ShareDirective.prototype._shareButtonChanged = function (change) {
            return change && (change.firstChange || change.previousValue !== change.currentValue);
        };
        ShareDirective.prototype._urlChanged = function (change) {
            return !this.url || (change && change.previousValue !== change.currentValue);
        };
        /**
         * Get share params from meta tags first and fallback to user inputs
         */
        ShareDirective.prototype.getParamsFromMetaTags = function () {
            return {
                url: this.url,
                title: this.title || this._getMetaTagContent('og:title'),
                description: this.description || this._getMetaTagContent('og:description'),
                image: this.image || this._getMetaTagContent('og:image'),
                via: this._share.config.twitterAccount,
                tags: this.tags
            };
        };
        /**
         * Get share params from user inputs
         */
        ShareDirective.prototype.getParamsFromInputs = function () {
            return {
                url: this.url,
                title: this.title,
                description: this.description,
                image: this.image,
                tags: this.tags,
                via: this._share.config.twitterAccount,
            };
        };
        ShareDirective.prototype.open = function (params) {
            var _this = this;
            // Set sharer link based on user's device
            var sharerLink;
            if (this._platform.IOS && this.shareButton.share.ios) {
                sharerLink = this.shareButton.share.ios;
            }
            else if (this._platform.ANDROID && this.shareButton.share.android) {
                sharerLink = this.shareButton.share.android;
            }
            else {
                sharerLink = this.shareButton.share.desktop;
            }
            if (sharerLink) {
                // Set sharer link params
                this._finalUrl = sharerLink + this._serializeParams(params);
                // Log the sharer link in debug mode
                if (this._share.config.debug) {
                    console.log('[DEBUG SHARE BUTTON]: ', this._finalUrl);
                }
                // Open the share window
                // There are two methods available for opening the share window:
                // 1. Using a real anchor
                // 2. Using window.open
                var sharerMethod = this.shareButton.method || this._share.config.sharerMethod;
                var sharerTarget = this.shareButton.target || this._share.config.sharerTarget;
                switch (sharerMethod) {
                    case exports.SharerMethod.Anchor:
                        var linkElement = this._document.createElement('a');
                        // Make it open in a new tab/window (depends on user's browser configuration)
                        linkElement.setAttribute('target', sharerTarget);
                        // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
                        linkElement.setAttribute('rel', 'noopener noreferrer');
                        linkElement.href = this._finalUrl;
                        linkElement.click();
                        linkElement.remove();
                        break;
                    case exports.SharerMethod.Window:
                        // Open link using Window object
                        var openWindow = this._share.config.windowObj[this._share.config.windowFuncName];
                        var popUpWindow_1 = openWindow(this._finalUrl, sharerTarget, this._share.windowSize);
                        // Prevent security vulnerability https://medium.com/@jitbit/target-blank-the-most-underestimated-vulnerability-ever-96e328301f4c
                        this._share.config.windowObj.opener = null;
                        // Resolve when share dialog is closed
                        if (popUpWindow_1) {
                            return new rxjs.Observable(function (sub) {
                                var pollTimer = _this._document.defaultView.setInterval(function () {
                                    if (popUpWindow_1.closed) {
                                        _this._document.defaultView.clearInterval(pollTimer);
                                        // Emit when share windows is closed
                                        _this.closed.emit(_this.shareButtonName);
                                        sub.next();
                                        sub.complete();
                                    }
                                }, 200);
                            });
                        }
                        break;
                }
                // Emit when share window is opened
                this.opened.emit(this.shareButtonName);
            }
            return rxjs.EMPTY;
        };
        ShareDirective.prototype._serializeParams = function (params) {
            var _this = this;
            return Object.entries(this.shareButton.params)
                .map(function (_a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                // Check if share button param has a map function
                var paramFunc = _this.shareButton.paramsFunc ? _this.shareButton.paramsFunc[key] : null;
                if (params[key] || paramFunc) {
                    var paramValue = paramFunc ? paramFunc(params) : params[key];
                    return value + "=" + encodeURIComponent(paramValue);
                }
                return '';
            })
                .filter(function (urlParam) { return urlParam !== ''; })
                .join('&');
        };
        return ShareDirective;
    }());
    ShareDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[shareButton]',
                    exportAs: 'shareButton'
                },] }
    ];
    ShareDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: platformBrowser.Meta },
        { type: platform.Platform },
        { type: clipboard.Clipboard },
        { type: ShareService },
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [i2.DOCUMENT,] }] }
    ]; };
    ShareDirective.propDecorators = {
        shareButtonName: [{ type: i0.Input, args: ['shareButton',] }],
        autoSetMeta: [{ type: i0.Input }],
        url: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        description: [{ type: i0.Input }],
        image: [{ type: i0.Input }],
        tags: [{ type: i0.Input }],
        opened: [{ type: i0.Output }],
        closed: [{ type: i0.Output }],
        share: [{ type: i0.HostListener, args: ['click',] }]
    };

    var ShareModule = /** @class */ (function () {
        function ShareModule() {
        }
        ShareModule.withConfig = function (config) {
            return {
                ngModule: ShareModule,
                providers: [
                    { provide: SHARE_BUTTONS_CONFIG, useValue: config }
                ]
            };
        };
        return ShareModule;
    }());
    ShareModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        platform.PlatformModule,
                        clipboard.ClipboardModule
                    ],
                    declarations: [
                        ShareDirective
                    ],
                    exports: [
                        ShareDirective
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.IShareButton = IShareButton;
    exports.SHARE_BUTTONS = SHARE_BUTTONS;
    exports.SHARE_BUTTONS_CONFIG = SHARE_BUTTONS_CONFIG;
    exports.ShareDirective = ShareDirective;
    exports.ShareModule = ShareModule;
    exports.ShareService = ShareService;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-sharebuttons.umd.js.map
