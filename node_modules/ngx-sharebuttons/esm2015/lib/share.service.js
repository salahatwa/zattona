import { Inject, Injectable, Optional } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { BehaviorSubject } from 'rxjs';
import { SHARE_BUTTONS_CONFIG, SharerMethod } from './share.models';
import { SHARE_BUTTONS } from './share.defaults';
import { mergeDeep } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./share.models";
import * as i2 from "@angular/common";
export class ShareService {
    constructor(config, _document) {
        this._document = _document;
        /** Global config that applies on all share buttons in the app */
        this.config = {
            sharerMethod: SharerMethod.Anchor,
            sharerTarget: '_blank',
            windowObj: this._document.defaultView,
            windowFuncName: 'open',
            prop: SHARE_BUTTONS,
            theme: 'default',
            include: [],
            exclude: [],
            size: 0,
            autoSetMeta: true,
            windowWidth: 800,
            windowHeight: 500,
            moreButtonIcon: 'ellipsis-h',
            lessButtonIcon: 'minus'
        };
        /** Stream that emits when config changes */
        this.config$ = new BehaviorSubject(this.config);
        if (config) {
            this.setConfig(config);
        }
    }
    /**
     * Share buttons properties, used to get the text, color and icon of each button.
     */
    get prop() {
        return this.config.prop;
    }
    get windowSize() {
        return `width=${this.config.windowWidth}, height=${this.config.windowHeight}`;
    }
    setConfig(config) {
        this.config = mergeDeep(this.config, config);
        this.config$.next(this.config);
    }
    addButton(name, props) {
        this.setConfig({
            prop: {
                [name]: props
            }
        });
    }
}
ShareService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShareService_Factory() { return new ShareService(i0.ɵɵinject(i1.SHARE_BUTTONS_CONFIG, 8), i0.ɵɵinject(i2.DOCUMENT)); }, token: ShareService, providedIn: "root" });
ShareService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ShareService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [SHARE_BUTTONS_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hhcmVidXR0b25zL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQWdCLG9CQUFvQixFQUFzQixZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN0RyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFNBQVMsQ0FBQzs7OztBQUtwQyxNQUFNLE9BQU8sWUFBWTtJQXVCdkIsWUFBc0QsTUFBMEIsRUFBNEIsU0FBYztRQUFkLGNBQVMsR0FBVCxTQUFTLENBQUs7UUFyQjFILGlFQUFpRTtRQUNqRSxXQUFNLEdBQXVCO1lBQzNCLFlBQVksRUFBRSxZQUFZLENBQUMsTUFBTTtZQUNqQyxZQUFZLEVBQUUsUUFBUTtZQUN0QixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXO1lBQ3JDLGNBQWMsRUFBRSxNQUFNO1lBQ3RCLElBQUksRUFBRSxhQUFhO1lBQ25CLEtBQUssRUFBRSxTQUFTO1lBQ2hCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsT0FBTyxFQUFFLEVBQUU7WUFDWCxJQUFJLEVBQUUsQ0FBQztZQUNQLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFdBQVcsRUFBRSxHQUFHO1lBQ2hCLFlBQVksRUFBRSxHQUFHO1lBQ2pCLGNBQWMsRUFBRSxZQUFZO1lBQzVCLGNBQWMsRUFBRSxPQUFPO1NBQ3hCLENBQUM7UUFFRiw0Q0FBNEM7UUFDNUMsWUFBTyxHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUd6QyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLFVBQVU7UUFDWixPQUFPLFNBQVUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFZLFlBQWEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFhLEVBQUUsQ0FBQztJQUNwRixDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQTBCO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxTQUFTLENBQUMsSUFBWSxFQUFFLEtBQW1CO1FBQ3pDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDYixJQUFJLEVBQUU7Z0JBQ0osQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLO2FBQ2Q7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDOzs7O1lBdERGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OzRDQXdCYyxRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjs0Q0FBK0IsTUFBTSxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElTaGFyZUJ1dHRvbiwgU0hBUkVfQlVUVE9OU19DT05GSUcsIFNoYXJlQnV0dG9uc0NvbmZpZywgU2hhcmVyTWV0aG9kIH0gZnJvbSAnLi9zaGFyZS5tb2RlbHMnO1xuaW1wb3J0IHsgU0hBUkVfQlVUVE9OUyB9IGZyb20gJy4vc2hhcmUuZGVmYXVsdHMnO1xuaW1wb3J0IHsgbWVyZ2VEZWVwIH0gZnJvbSAnLi91dGlscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNoYXJlU2VydmljZSB7XG5cbiAgLyoqIEdsb2JhbCBjb25maWcgdGhhdCBhcHBsaWVzIG9uIGFsbCBzaGFyZSBidXR0b25zIGluIHRoZSBhcHAgKi9cbiAgY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcgPSB7XG4gICAgc2hhcmVyTWV0aG9kOiBTaGFyZXJNZXRob2QuQW5jaG9yLFxuICAgIHNoYXJlclRhcmdldDogJ19ibGFuaycsXG4gICAgd2luZG93T2JqOiB0aGlzLl9kb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB3aW5kb3dGdW5jTmFtZTogJ29wZW4nLFxuICAgIHByb3A6IFNIQVJFX0JVVFRPTlMsXG4gICAgdGhlbWU6ICdkZWZhdWx0JyxcbiAgICBpbmNsdWRlOiBbXSxcbiAgICBleGNsdWRlOiBbXSxcbiAgICBzaXplOiAwLFxuICAgIGF1dG9TZXRNZXRhOiB0cnVlLFxuICAgIHdpbmRvd1dpZHRoOiA4MDAsXG4gICAgd2luZG93SGVpZ2h0OiA1MDAsXG4gICAgbW9yZUJ1dHRvbkljb246ICdlbGxpcHNpcy1oJyxcbiAgICBsZXNzQnV0dG9uSWNvbjogJ21pbnVzJ1xuICB9O1xuXG4gIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGNvbmZpZyBjaGFuZ2VzICovXG4gIGNvbmZpZyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KHRoaXMuY29uZmlnKTtcblxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KFNIQVJFX0JVVFRPTlNfQ09ORklHKSBjb25maWc6IFNoYXJlQnV0dG9uc0NvbmZpZywgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBfZG9jdW1lbnQ6IGFueSkge1xuICAgIGlmIChjb25maWcpIHtcbiAgICAgIHRoaXMuc2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNoYXJlIGJ1dHRvbnMgcHJvcGVydGllcywgdXNlZCB0byBnZXQgdGhlIHRleHQsIGNvbG9yIGFuZCBpY29uIG9mIGVhY2ggYnV0dG9uLlxuICAgKi9cbiAgZ2V0IHByb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29uZmlnLnByb3A7XG4gIH1cblxuICBnZXQgd2luZG93U2l6ZSgpIHtcbiAgICByZXR1cm4gYHdpZHRoPSR7IHRoaXMuY29uZmlnLndpbmRvd1dpZHRoIH0sIGhlaWdodD0keyB0aGlzLmNvbmZpZy53aW5kb3dIZWlnaHQgfWA7XG4gIH1cblxuICBzZXRDb25maWcoY29uZmlnOiBTaGFyZUJ1dHRvbnNDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IG1lcmdlRGVlcCh0aGlzLmNvbmZpZywgY29uZmlnKTtcbiAgICB0aGlzLmNvbmZpZyQubmV4dCh0aGlzLmNvbmZpZyk7XG4gIH1cblxuICBhZGRCdXR0b24obmFtZTogc3RyaW5nLCBwcm9wczogSVNoYXJlQnV0dG9uKSB7XG4gICAgdGhpcy5zZXRDb25maWcoe1xuICAgICAgcHJvcDoge1xuICAgICAgICBbbmFtZV06IHByb3BzXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19