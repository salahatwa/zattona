import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { SharePopupService } from './share-popup.service';
// import { ShareService } from '../../src/public-api';
import { ShareService } from 'ngx-sharebuttons';
export class SharePopupComponent {
    constructor(_sharePopup, _share) {
        this._sharePopup = _sharePopup;
        this._share = _share;
        this.theme = this._share.config.theme;
        this.icon = ['fas', 'share'];
        this.text = 'Share';
        this.closeIcon = ['fas', 'times-circle'];
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        this.hasBackdrop = true;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
        // Stream that emits when the share popup is closed
        this.popupClosed = new EventEmitter();
    }
}
SharePopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'share-popup-button',
                template: `
    <div class="sb-button sb-{{theme}}">
      <button shareButtonsPopup
              class="sb-wrapper"
              [theme]="theme"
              [include]="include"
              [exclude]="exclude"
              [show]="show"
              [url]="url"
              [showIcon]="showIcon"
              [showText]="showText"
              [size]="size"
              [tags]="tags"
              [autoSetMeta]="autoSetMeta"
              [title]="title"
              [description]="description"
              [image]="image"
              (closed)="closed.emit($event)"
              (opened)="opened.emit($event)">
        <div class="sb-content">

          <div *ngIf="showIcon" class="sb-icon">
            <fa-icon [icon]="icon" [fixedWidth]="true"></fa-icon>
          </div>

          <div *ngIf="showText" class="sb-text">
            {{ text }}
          </div>

        </div>
      </button>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--button-color:#282c34}"]
            },] }
];
SharePopupComponent.ctorParameters = () => [
    { type: SharePopupService },
    { type: ShareService }
];
SharePopupComponent.propDecorators = {
    theme: [{ type: Input }],
    icon: [{ type: Input }],
    text: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    closeIcon: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    show: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    hasBackdrop: [{ type: Input }],
    backdropClass: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }],
    popupClosed: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmUtcG9wdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1zaGFyZWJ1dHRvbnMvcG9wdXAvc3JjLyIsInNvdXJjZXMiOlsic2hhcmUtcG9wdXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsdUJBQXVCLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFMUQsdURBQXVEO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQXdDaEQsTUFBTSxPQUFPLG1CQUFtQjtJQTJEOUIsWUFBb0IsV0FBOEIsRUFBVSxNQUFvQjtRQUE1RCxnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFjO1FBekR2RSxVQUFLLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO1FBRXpDLFNBQUksR0FBc0IsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFM0MsU0FBSSxHQUFXLE9BQU8sQ0FBQztRQU12QixjQUFTLEdBQXNCLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBc0JoRSx5QkFBeUI7UUFDaEIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUV6Qix3QkFBd0I7UUFDZixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRTFCLG1CQUFtQjtRQUNWLFNBQUksR0FBRyxDQUFDLENBQUM7UUFLVCxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUk1QixnQ0FBZ0M7UUFDdEIsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFFOUMsZ0NBQWdDO1FBQ3RCLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRTlDLG1EQUFtRDtRQUN6QyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFHakQsQ0FBQzs7O1lBbEdGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBZ0NUO2dCQUVELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7O1lBMUNRLGlCQUFpQjtZQUdqQixZQUFZOzs7b0JBMENsQixLQUFLO21CQUVMLEtBQUs7bUJBRUwsS0FBSztzQkFFTCxLQUFLO3NCQUVMLEtBQUs7d0JBRUwsS0FBSztrQkFHTCxLQUFLO29CQUdMLEtBQUs7MEJBR0wsS0FBSztvQkFHTCxLQUFLO21CQUdMLEtBQUs7MEJBR0wsS0FBSzttQkFFTCxLQUFLO3VCQUdMLEtBQUs7dUJBR0wsS0FBSzttQkFHTCxLQUFLO3VCQUdMLEtBQUs7MEJBRUwsS0FBSzs0QkFFTCxLQUFLO3FCQUdMLE1BQU07cUJBR04sTUFBTTswQkFHTixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaGFyZVBvcHVwU2VydmljZSB9IGZyb20gJy4vc2hhcmUtcG9wdXAuc2VydmljZSc7XG5cbi8vIGltcG9ydCB7IFNoYXJlU2VydmljZSB9IGZyb20gJy4uLy4uL3NyYy9wdWJsaWMtYXBpJztcbmltcG9ydCB7IFNoYXJlU2VydmljZSB9IGZyb20gJ25neC1zaGFyZWJ1dHRvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzaGFyZS1wb3B1cC1idXR0b24nLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJzYi1idXR0b24gc2Ite3t0aGVtZX19XCI+XG4gICAgICA8YnV0dG9uIHNoYXJlQnV0dG9uc1BvcHVwXG4gICAgICAgICAgICAgIGNsYXNzPVwic2Itd3JhcHBlclwiXG4gICAgICAgICAgICAgIFt0aGVtZV09XCJ0aGVtZVwiXG4gICAgICAgICAgICAgIFtpbmNsdWRlXT1cImluY2x1ZGVcIlxuICAgICAgICAgICAgICBbZXhjbHVkZV09XCJleGNsdWRlXCJcbiAgICAgICAgICAgICAgW3Nob3ddPVwic2hvd1wiXG4gICAgICAgICAgICAgIFt1cmxdPVwidXJsXCJcbiAgICAgICAgICAgICAgW3Nob3dJY29uXT1cInNob3dJY29uXCJcbiAgICAgICAgICAgICAgW3Nob3dUZXh0XT1cInNob3dUZXh0XCJcbiAgICAgICAgICAgICAgW3NpemVdPVwic2l6ZVwiXG4gICAgICAgICAgICAgIFt0YWdzXT1cInRhZ3NcIlxuICAgICAgICAgICAgICBbYXV0b1NldE1ldGFdPVwiYXV0b1NldE1ldGFcIlxuICAgICAgICAgICAgICBbdGl0bGVdPVwidGl0bGVcIlxuICAgICAgICAgICAgICBbZGVzY3JpcHRpb25dPVwiZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICBbaW1hZ2VdPVwiaW1hZ2VcIlxuICAgICAgICAgICAgICAoY2xvc2VkKT1cImNsb3NlZC5lbWl0KCRldmVudClcIlxuICAgICAgICAgICAgICAob3BlbmVkKT1cIm9wZW5lZC5lbWl0KCRldmVudClcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNiLWNvbnRlbnRcIj5cblxuICAgICAgICAgIDxkaXYgKm5nSWY9XCJzaG93SWNvblwiIGNsYXNzPVwic2ItaWNvblwiPlxuICAgICAgICAgICAgPGZhLWljb24gW2ljb25dPVwiaWNvblwiIFtmaXhlZFdpZHRoXT1cInRydWVcIj48L2ZhLWljb24+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2ICpuZ0lmPVwic2hvd1RleHRcIiBjbGFzcz1cInNiLXRleHRcIj5cbiAgICAgICAgICAgIHt7IHRleHQgfX1cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9zaGFyZS1wb3B1cC5jb21wb25lbnQuc2NzcyddLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTaGFyZVBvcHVwQ29tcG9uZW50IHtcblxuICBASW5wdXQoKSB0aGVtZTogc3RyaW5nID0gdGhpcy5fc2hhcmUuY29uZmlnLnRoZW1lO1xuXG4gIEBJbnB1dCgpIGljb246IHN0cmluZyB8IHN0cmluZ1tdID0gWydmYXMnLCAnc2hhcmUnXTtcblxuICBASW5wdXQoKSB0ZXh0OiBzdHJpbmcgPSAnU2hhcmUnO1xuXG4gIEBJbnB1dCgpIGluY2x1ZGUhOiBzdHJpbmdbXTtcblxuICBASW5wdXQoKSBleGNsdWRlITogc3RyaW5nW107XG5cbiAgQElucHV0KCkgY2xvc2VJY29uOiBzdHJpbmcgfCBzdHJpbmdbXSA9IFsnZmFzJywgJ3RpbWVzLWNpcmNsZSddO1xuXG4gIC8qKiBUaGUgc2hhcmluZyBsaW5rICovXG4gIEBJbnB1dCgpIHVybDogc3RyaW5nO1xuXG4gIC8qKiBUaGUgdGl0bGUgcGFyYW1ldGVyICovXG4gIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqIFRoZSBkZXNjcmlwdGlvbiBwYXJhbWV0ZXIgKi9cbiAgQElucHV0KCkgZGVzY3JpcHRpb246IHN0cmluZztcblxuICAvKiogVGhlIGltYWdlIHBhcmFtZXRlciBmb3Igc2hhcmluZyBvbiBQaW50ZXJlc3QgKi9cbiAgQElucHV0KCkgaW1hZ2U6IHN0cmluZztcblxuICAvKiogVGhlIHRhZ3MgcGFyYW1ldGVyIGZvciBzaGFyaW5nIG9uIFR3aXR0ZXIgYW5kIFR1bWJsciAqL1xuICBASW5wdXQoKSB0YWdzOiBzdHJpbmc7XG5cbiAgLyoqIFNldHMgbWV0YSB0YWdzIGZyb20gZG9jdW1lbnQgaGVhZCwgdXNlZnVsIHdoZW4gU0VPIGlzIGF2YWlsYWJsZSAqL1xuICBASW5wdXQoKSBhdXRvU2V0TWV0YTogYm9vbGVhbjtcblxuICBASW5wdXQoKSBzaG93OiBudW1iZXI7XG5cbiAgLyoqIFNob3cgYnV0dG9ucyBpY29ucyAqL1xuICBASW5wdXQoKSBzaG93SWNvbiA9IHRydWU7XG5cbiAgLyoqIFNob3cgYnV0dG9ucyB0ZXh0ICovXG4gIEBJbnB1dCgpIHNob3dUZXh0ID0gZmFsc2U7XG5cbiAgLyoqIEJ1dHRvbnMgc2l6ZSAqL1xuICBASW5wdXQoKSBzaXplID0gMDtcblxuICAvKiogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIGlmIHRoZSBidXR0b24ncyBjbGljayBpcyBkaXNhYmxlZCAqL1xuICBASW5wdXQoKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICBASW5wdXQoKSBoYXNCYWNrZHJvcCA9IHRydWU7XG5cbiAgQElucHV0KCkgYmFja2Ryb3BDbGFzczogc3RyaW5nO1xuXG4gIC8qKiBTaGFyZSBkaWFsb2cgb3BlbmVkIGV2ZW50ICovXG4gIEBPdXRwdXQoKSBvcGVuZWQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICAvKiogU2hhcmUgZGlhbG9nIGNsb3NlZCBldmVudCAqL1xuICBAT3V0cHV0KCkgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgc2hhcmUgcG9wdXAgaXMgY2xvc2VkXG4gIEBPdXRwdXQoKSBwb3B1cENsb3NlZCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9zaGFyZVBvcHVwOiBTaGFyZVBvcHVwU2VydmljZSwgcHJpdmF0ZSBfc2hhcmU6IFNoYXJlU2VydmljZSkge1xuICB9XG59XG4iXX0=