import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';
import { ShareService, SHARE_BUTTONS } from 'ngx-sharebuttons';
export class ShareButtons {
    constructor(_share) {
        this._share = _share;
        this._state$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(SHARE_BUTTONS).length
        });
        this._configSub$ = Subscription.EMPTY;
        this.theme = this._share.config.theme;
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
    }
    ngOnInit() {
        this.state$ = this._state$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
            const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;
            const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon
            };
        }));
        // Subscribe to share buttons config changes, This updates the component whenever a new button is added
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);
            const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.moreButtonIcon,
                lessIcon: config.lessButtonIcon
            });
        });
    }
    ngOnChanges(changes) {
        const shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
            (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
            (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
        if (shouldUpdate) {
            this.updateState({
                includedButtons: this.include,
                excludedButtons: this.exclude,
                shownCount: this.show
            });
        }
    }
    ngOnDestroy() {
        this._configSub$.unsubscribe();
        this._state$.complete();
    }
    updateState(state) {
        this._state$.next(Object.assign(Object.assign({}, this._state$.value), state));
    }
}
ShareButtons.decorators = [
    { type: Component, args: [{
                selector: 'share-buttons',
                template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [size]=\"(1 + size/20) * 14\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--sb-margin:0.3125em;display:inherit}"]
            },] }
];
ShareButtons.ctorParameters = () => [
    { type: ShareService }
];
ShareButtons.propDecorators = {
    theme: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    show: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }]
};
/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]
 */
//# sourceMappingURL=data:application/json;base64,