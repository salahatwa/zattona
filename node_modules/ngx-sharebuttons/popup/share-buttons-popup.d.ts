import { ElementRef, OnDestroy, AfterViewInit } from '@angular/core';
import { FocusTrapFactory } from '@angular/cdk/a11y';
import { OverlayRef } from '@angular/cdk/overlay';
import { SharePopupOptions } from './share-buttons-popup.model';
export declare class ShareButtonsPopup implements AfterViewInit, OnDestroy {
    private _document;
    options: SharePopupOptions;
    private _focusTrapFactory;
    private _elementRef;
    /** Overlay ref to close the lightbox */
    overlayRef: OverlayRef;
    /** The ARIA role of the lightbox element. */
    role: string;
    /** Aria label to assign to the lightbox element */
    ariaLabel: string;
    /** ID of the element that should be considered as the lightbox's label. */
    ariaLabelledBy: string;
    /** ID of the element that describes the lightbox. */
    ariaDescribedBy: string;
    /** The class that traps and manages focus within the lightbox. */
    private _focusTrap;
    /** Element that was focused before the lightbox was opened. Save this to restore upon close. */
    private _elementFocusedBeforeDialogWasOpened;
    get isBtnCopy(): boolean;
    constructor(_document: any, options: SharePopupOptions, _focusTrapFactory: FocusTrapFactory, _elementRef: ElementRef);
    ngAfterViewInit(): void;
    /** Callback, invoked whenever an animation on the host completes. */
    ngOnDestroy(): void;
    /** Moves the focus inside the focus trap. */
    private _trapFocus;
    /** Saves a reference to the element that was focused before the lightbox was opened. */
    private _savePreviouslyFocusedElement;
    /** Restores focus to the element that was focused before the lightbox opened. */
    private _restoreFocus;
}
