import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ElementRef, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { SHARE_BUTTONS, ShareService, SHARE_BUTTONS_CONFIG } from 'ngx-sharebuttons';
import { ShareButtonModule } from 'ngx-sharebuttons/button';
import { BehaviorSubject, Subscription } from 'rxjs';
import { map } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'ngx-sharebuttons';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from 'ngx-sharebuttons/button';
import * as ɵngcc4 from '@fortawesome/angular-fontawesome';

function ShareButtons_div_0_share_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "share-button", 3);
    ɵngcc0.ɵɵlistener("opened", function ShareButtons_div_0_share_button_1_Template_share_button_opened_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.opened.emit($event); })("closed", function ShareButtons_div_0_share_button_1_Template_share_button_closed_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.closed.emit($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const button_r4 = ctx.$implicit;
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("button", button_r4)("theme", ctx_r2.theme)("url", ctx_r2.url)("title", ctx_r2.title)("description", ctx_r2.description)("image", ctx_r2.image)("tags", ctx_r2.tags)("autoSetMeta", ctx_r2.autoSetMeta)("showIcon", ctx_r2.showIcon)("showText", ctx_r2.showText)("size", ctx_r2.size)("disabled", ctx_r2.disabled);
} }
function ShareButtons_div_0_expand_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "expand-button", 4);
    ɵngcc0.ɵɵlistener("toggle", function ShareButtons_div_0_expand_button_2_Template_expand_button_toggle_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(2); return ctx_r8.updateState({ expanded: $event }); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const state_r1 = ɵngcc0.ɵɵnextContext().$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("sb-button sb-", ctx_r3.theme, "");
    ɵngcc0.ɵɵproperty("expanded", state_r1.expanded)("moreIcon", state_r1.moreIcon)("lessIcon", state_r1.lessIcon)("size", (1 + ctx_r3.size / 20) * 14);
} }
function ShareButtons_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, ShareButtons_div_0_share_button_1_Template, 1, 12, "share-button", 1);
    ɵngcc0.ɵɵtemplate(2, ShareButtons_div_0_expand_button_2_Template, 1, 7, "expand-button", 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const state_r1 = ctx.$implicit;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("sb-group sb-", ctx_r0.theme, "");
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", state_r1.selectedButtons);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", state_r1.shownCount < state_r1.userButtons.length);
} }
class ShareButtons {
    constructor(_share) {
        this._share = _share;
        this._state$ = new BehaviorSubject({
            includedButtons: [],
            excludedButtons: [],
            userButtons: [],
            selectedButtons: [],
            expanded: true,
            shownCount: Object.keys(SHARE_BUTTONS).length
        });
        this._configSub$ = Subscription.EMPTY;
        this.theme = this._share.config.theme;
        /** Show buttons icons */
        this.showIcon = true;
        /** Show buttons text */
        this.showText = false;
        /** Buttons size */
        this.size = 0;
        /** Share dialog opened event */
        this.opened = new EventEmitter();
        /** Share dialog closed event */
        this.closed = new EventEmitter();
    }
    ngOnInit() {
        this.state$ = this._state$.pipe(map((state) => {
            // Use component include buttons, otherwise fallback to global include buttons
            const includedButtons = state.includedButtons && state.includedButtons.length ? state.includedButtons : state.userButtons;
            const userButtons = state.excludedButtons ? includedButtons.filter((btn) => state.excludedButtons.indexOf(btn) < 0) : includedButtons;
            const selectedButtons = userButtons.slice(0, state.expanded ? userButtons.length : state.shownCount);
            return {
                userButtons,
                selectedButtons,
                expanded: state.expanded,
                shownCount: state.shownCount,
                moreIcon: state.moreIcon,
                lessIcon: state.lessIcon
            };
        }));
        // Subscribe to share buttons config changes, This updates the component whenever a new button is added
        this._configSub$ = this._share.config$.subscribe((config) => {
            // Use global include buttons, otherwise fallback to all buttons
            const includedButtons = config.include.length ? config.include : Object.keys(SHARE_BUTTONS);
            const userButtons = includedButtons.filter((btn) => config.exclude.indexOf(btn) < 0);
            this.updateState({
                userButtons,
                expanded: false,
                moreIcon: config.moreButtonIcon,
                lessIcon: config.lessButtonIcon
            });
        });
    }
    ngOnChanges(changes) {
        const shouldUpdate = (changes['include'] && changes['include'].currentValue !== changes['include'].previousValue) ||
            (changes['exclude'] && changes['exclude'].currentValue !== changes['exclude'].previousValue) ||
            (changes['show'] && changes['show'].currentValue !== changes['show'].previousValue);
        if (shouldUpdate) {
            this.updateState({
                includedButtons: this.include,
                excludedButtons: this.exclude,
                shownCount: this.show
            });
        }
    }
    ngOnDestroy() {
        this._configSub$.unsubscribe();
        this._state$.complete();
    }
    updateState(state) {
        this._state$.next(Object.assign(Object.assign({}, this._state$.value), state));
    }
}
ShareButtons.ɵfac = function ShareButtons_Factory(t) { return new (t || ShareButtons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ShareService)); };
ShareButtons.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ShareButtons, selectors: [["share-buttons"]], inputs: { theme: "theme", showIcon: "showIcon", showText: "showText", size: "size", include: "include", exclude: "exclude", show: "show", url: "url", title: "title", description: "description", image: "image", tags: "tags", autoSetMeta: "autoSetMeta", disabled: "disabled" }, outputs: { opened: "opened", closed: "closed" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 2, vars: 3, consts: [[3, "class", 4, "ngIf"], [3, "button", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "size", "disabled", "opened", "closed", 4, "ngFor", "ngForOf"], [3, "class", "expanded", "moreIcon", "lessIcon", "size", "toggle", 4, "ngIf"], [3, "button", "theme", "url", "title", "description", "image", "tags", "autoSetMeta", "showIcon", "showText", "size", "disabled", "opened", "closed"], [3, "expanded", "moreIcon", "lessIcon", "size", "toggle"]], template: function ShareButtons_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ShareButtons_div_0_Template, 3, 5, "div", 0);
        ɵngcc0.ɵɵpipe(1, "async");
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.state$));
    } }, directives: function () { return [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.ShareButton, ExpandButton]; }, pipes: function () { return [ɵngcc2.AsyncPipe]; }, styles: ["[_nghost-%COMP%]{--sb-margin:0.3125em;display:inherit}"], changeDetection: 0 });
ShareButtons.ctorParameters = () => [
    { type: ShareService }
];
ShareButtons.propDecorators = {
    theme: [{ type: Input }],
    include: [{ type: Input }],
    exclude: [{ type: Input }],
    show: [{ type: Input }],
    url: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    image: [{ type: Input }],
    tags: [{ type: Input }],
    autoSetMeta: [{ type: Input }],
    showIcon: [{ type: Input }],
    showText: [{ type: Input }],
    size: [{ type: Input }],
    disabled: [{ type: Input }],
    opened: [{ type: Output }],
    closed: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShareButtons, [{
        type: Component,
        args: [{
                selector: 'share-buttons',
                template: "<div *ngIf=\"state$ | async; let state\" class=\"sb-group sb-{{theme}}\">\n  <share-button *ngFor=\"let button of state.selectedButtons\"\n                [button]=\"button\"\n                [theme]=\"theme\"\n                [url]=\"url\"\n                [title]=\"title\"\n                [description]=\"description\"\n                [image]=\"image\"\n                [tags]=\"tags\"\n                [autoSetMeta]=\"autoSetMeta\"\n                [showIcon]=\"showIcon\"\n                [showText]=\"showText\"\n                [size]=\"size\"\n                (opened)=\"opened.emit($event)\"\n                (closed)=\"closed.emit($event)\"\n                [disabled]=\"disabled\">\n  </share-button>\n  <expand-button *ngIf=\"state.shownCount < state.userButtons.length\"\n                 class=\"sb-button sb-{{theme}}\"\n                 [expanded]=\"state.expanded\"\n                 [moreIcon]=\"state.moreIcon\"\n                 [lessIcon]=\"state.lessIcon\"\n                 [size]=\"(1 + size/20) * 14\"\n                 (toggle)=\"updateState({expanded: $event})\">\n  </expand-button>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{--sb-margin:0.3125em;display:inherit}"]
            }]
    }], function () { return [{ type: ɵngcc1.ShareService }]; }, { theme: [{
            type: Input
        }], showIcon: [{
            type: Input
        }], showText: [{
            type: Input
        }], size: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], include: [{
            type: Input
        }], exclude: [{
            type: Input
        }], show: [{
            type: Input
        }], url: [{
            type: Input
        }], title: [{
            type: Input
        }], description: [{
            type: Input
        }], image: [{
            type: Input
        }], tags: [{
            type: Input
        }], autoSetMeta: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
/**
 * Explanation of the above code:
 * ------------------------------
 Include buttons: includes only wanted buttons and excludes the rest
 Exclude buttons: excludes only the unwanted buttons
 User buttons = Include buttons - exclude buttons
 Selected Buttons = User buttons [shown number]
 */

class ExpandButton {
    constructor(el) {
        this.toggle = new EventEmitter();
        el.nativeElement.style.setProperty('--button-color', '#FF6651');
    }
}
ExpandButton.ɵfac = function ExpandButton_Factory(t) { return new (t || ExpandButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ExpandButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExpandButton, selectors: [["expand-button"]], inputs: { moreIcon: "moreIcon", lessIcon: "lessIcon", expanded: "expanded", size: "size" }, outputs: { toggle: "toggle" }, decls: 4, vars: 3, consts: [[1, "sb-wrapper", "sb-expand", "sb-show-icon", 3, "click"], [1, "sb-content"], [1, "sb-icon"], [3, "icon"]], template: function ExpandButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ExpandButton_Template_button_click_0_listener() { return ctx.toggle.emit(!ctx.expanded); });
        ɵngcc0.ɵɵelementStart(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "fa-icon", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵstyleProp("font-size", ctx.size, "px");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("icon", ctx.expanded ? ctx.lessIcon : ctx.moreIcon);
    } }, directives: [ɵngcc4.FaIconComponent], encapsulation: 2, changeDetection: 0 });
ExpandButton.ctorParameters = () => [
    { type: ElementRef }
];
ExpandButton.propDecorators = {
    moreIcon: [{ type: Input }],
    lessIcon: [{ type: Input }],
    expanded: [{ type: Input }],
    size: [{ type: Input }],
    toggle: [{ type: Output }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ExpandButton, [{
        type: Component,
        args: [{
                selector: 'expand-button',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <button class="sb-wrapper sb-expand sb-show-icon"
            [style.fontSize.px]="size"
            (click)="toggle.emit(!expanded)">

      <div class="sb-content">
        <div class="sb-icon">
          <fa-icon [icon]="expanded ? lessIcon : moreIcon"></fa-icon>
        </div>
      </div>
    </button>
  `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { toggle: [{
            type: Output
        }], moreIcon: [{
            type: Input
        }], lessIcon: [{
            type: Input
        }], expanded: [{
            type: Input
        }], size: [{
            type: Input
        }] }); })();

class ShareButtonsModule {
    static withConfig(config) {
        return {
            ngModule: ShareButtonsModule,
            providers: [{ provide: SHARE_BUTTONS_CONFIG, useValue: config }]
        };
    }
}
ShareButtonsModule.ɵfac = function ShareButtonsModule_Factory(t) { return new (t || ShareButtonsModule)(); };
ShareButtonsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ShareButtonsModule });
ShareButtonsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[
            ShareButtonModule,
            CommonModule
        ], ShareButtonModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ShareButtonsModule, { declarations: function () { return [ShareButtons, ExpandButton]; }, imports: function () { return [ShareButtonModule,
        CommonModule]; }, exports: function () { return [ShareButtonModule, ShareButtons]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ShareButtonsModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    ShareButtons,
                    ExpandButton
                ],
                imports: [
                    ShareButtonModule,
                    CommonModule
                ],
                exports: [
                    ShareButtonModule,
                    ShareButtons
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { ShareButtons, ShareButtonsModule, ExpandButton as ɵa };

//# sourceMappingURL=ngx-sharebuttons-buttons.js.map