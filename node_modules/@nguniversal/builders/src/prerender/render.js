/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/prerender/render", ["require", "exports", "@nguniversal/common/engine", "fs", "path"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    const engine_1 = require("@nguniversal/common/engine");
    const fs = require("fs");
    const path = require("path");
    const [indexHtml, indexFile, serverBundlePath, browserOutputPath, deployUrl, inlineCritialCss, minifyCss, ...routes] = process.argv.slice(2);
    /**
     * Handles importing the server bundle.
     */
    function getServerBundle(bundlePath) {
        return __awaiter(this, void 0, void 0, function* () {
            const { AppServerModule, AppServerModuleNgFactory, renderModule, renderModuleFactory, } = yield __syncRequire ? Promise.resolve().then(() => require(bundlePath)) : new Promise((resolve_1, reject_1) => { require([bundlePath], resolve_1, reject_1); });
            if (renderModuleFactory && AppServerModuleNgFactory) {
                // Happens when in ViewEngine mode.
                return {
                    renderModuleFn: renderModuleFactory,
                    AppServerModuleDef: AppServerModuleNgFactory,
                };
            }
            if (renderModule && AppServerModule) {
                // Happens when in Ivy mode.
                return {
                    renderModuleFn: renderModule,
                    AppServerModuleDef: AppServerModule,
                };
            }
            throw new Error(`renderModule method and/or AppServerModule were not exported from: ${serverBundlePath}.`);
        });
    }
    /**
     * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
     */
    // tslint:disable-next-line: no-floating-promises
    (() => __awaiter(void 0, void 0, void 0, function* () {
        if (!process.send) {
            throw new Error('Process must be spawned with an IPC channel.');
        }
        const browserIndexOutputPath = path.join(browserOutputPath, indexFile);
        let inlineCriticalCssProcessor;
        if (inlineCritialCss === 'true') {
            inlineCriticalCssProcessor = new engine_1.ÉµInlineCriticalCssProcessor({
                deployUrl,
                minify: minifyCss === 'true',
            });
        }
        for (const route of routes) {
            const outputFolderPath = path.join(browserOutputPath, route);
            const outputIndexPath = path.join(outputFolderPath, 'index.html');
            try {
                const { renderModuleFn, AppServerModuleDef } = yield getServerBundle(serverBundlePath);
                let html = yield renderModuleFn(AppServerModuleDef, {
                    document: indexHtml,
                    url: route,
                });
                if (inlineCriticalCssProcessor) {
                    const { content, warnings, errors } = yield inlineCriticalCssProcessor.process(html, {
                        outputPath: browserOutputPath,
                    });
                    // tslint:disable-next-line: no-non-null-assertion
                    warnings.forEach(message => process.send({ logLevel: 'warn', message }));
                    // tslint:disable-next-line: no-non-null-assertion
                    errors.forEach(message => process.send({ logLevel: 'error', message }));
                    html = content;
                }
                // This case happens when we are prerendering "/".
                if (browserIndexOutputPath === outputIndexPath) {
                    const browserIndexOutputPathOriginal = path.join(browserOutputPath, 'index.original.html');
                    fs.renameSync(browserIndexOutputPath, browserIndexOutputPathOriginal);
                }
                fs.mkdirSync(outputFolderPath, { recursive: true });
                fs.writeFileSync(outputIndexPath, html);
                process.send({ success: true, outputIndexPath });
            }
            catch (e) {
                process.send({ success: false, error: e.message, outputIndexPath });
                return;
            }
        }
    }))();
});
//# sourceMappingURL=data:application/json;base64,