import { ÉµCommonEngine as CommonEngine } from '@nguniversal/common/engine';
import { REQUEST, RESPONSE } from '@nguniversal/express-engine/tokens';
/**
 * This is an express engine for handling Angular Applications
 */
export function ngExpressEngine(setupOptions) {
    const engine = new CommonEngine(setupOptions.bootstrap, setupOptions.providers);
    return function (filePath, options, callback) {
        var _a, _b, _c, _d;
        try {
            const renderOptions = Object.assign({}, options);
            if (!setupOptions.bootstrap && !renderOptions.bootstrap) {
                throw new Error('You must pass in a NgModule or NgModuleFactory to be bootstrapped');
            }
            const req = renderOptions.req;
            const res = renderOptions.res || req.res;
            renderOptions.url =
                renderOptions.url || `${req.protocol}://${(req.get('host') || '')}${req.originalUrl}`;
            renderOptions.documentFilePath = renderOptions.documentFilePath || filePath;
            renderOptions.providers = [...(renderOptions.providers || []), getReqResProviders(req, res)];
            renderOptions.publicPath = (_b = (_a = renderOptions.publicPath) !== null && _a !== void 0 ? _a : setupOptions.publicPath) !== null && _b !== void 0 ? _b : (_c = options.settings) === null || _c === void 0 ? void 0 : _c.views,
                renderOptions.inlineCriticalCss = (_d = renderOptions.inlineCriticalCss) !== null && _d !== void 0 ? _d : setupOptions.inlineCriticalCss;
            engine.render(renderOptions)
                .then(html => callback(null, html))
                .catch(callback);
        }
        catch (err) {
            callback(err);
        }
    };
}
/**
 * Get providers of the request and response
 */
function getReqResProviders(req, res) {
    const providers = [
        {
            provide: REQUEST,
            useValue: req
        }
    ];
    if (res) {
        providers.push({
            provide: RESPONSE,
            useValue: res
        });
    }
    return providers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL21vZHVsZXMvZXhwcmVzcy1lbmdpbmUvc3JjL21haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsT0FBTyxFQUFFLGFBQWEsSUFBSSxZQUFZLEVBQWtCLE1BQU0sNEJBQTRCLENBQUM7QUFDM0YsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQWV2RTs7R0FFRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsWUFBc0M7SUFDcEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEYsT0FBTyxVQUFVLFFBQWdCLEVBQ2hCLE9BQWUsRUFDZixRQUFxRDs7UUFDcEUsSUFBSTtZQUNGLE1BQU0sYUFBYSxHQUFHLGtCQUFLLE9BQU8sQ0FBbUIsQ0FBQztZQUN0RCxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE1BQU0sSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQzthQUN0RjtZQUVELE1BQU0sR0FBRyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUM7WUFDOUIsTUFBTSxHQUFHLEdBQUcsYUFBYSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDO1lBRXpDLGFBQWEsQ0FBQyxHQUFHO2dCQUNqQixhQUFhLENBQUMsR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3RGLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsZ0JBQWdCLElBQUksUUFBUSxDQUFDO1lBQzVFLGFBQWEsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUM3RixhQUFhLENBQUMsVUFBVSxlQUFHLGFBQWEsQ0FBQyxVQUFVLG1DQUFJLFlBQVksQ0FBQyxVQUFVLHlDQUFLLE9BQWUsQ0FBQyxRQUFRLDBDQUFFLEtBQUs7Z0JBQ2xILGFBQWEsQ0FBQyxpQkFBaUIsU0FBRyxhQUFhLENBQUMsaUJBQWlCLG1DQUFJLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQztZQUVwRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztpQkFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDbEMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3BCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDZjtJQUNILENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILFNBQVMsa0JBQWtCLENBQUMsR0FBWSxFQUFFLEdBQWM7SUFDdEQsTUFBTSxTQUFTLEdBQXFCO1FBQ2xDO1lBQ0UsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLEdBQUc7U0FDZDtLQUNGLENBQUM7SUFDRixJQUFJLEdBQUcsRUFBRTtRQUNQLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDYixPQUFPLEVBQUUsUUFBUTtZQUNqQixRQUFRLEVBQUUsR0FBRztTQUNkLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UgfSBmcm9tICdleHByZXNzJztcblxuaW1wb3J0IHsgU3RhdGljUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IMm1Q29tbW9uRW5naW5lIGFzIENvbW1vbkVuZ2luZSwgybVSZW5kZXJPcHRpb25zIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2NvbW1vbi9lbmdpbmUnO1xuaW1wb3J0IHsgUkVRVUVTVCwgUkVTUE9OU0UgfSBmcm9tICdAbmd1bml2ZXJzYWwvZXhwcmVzcy1lbmdpbmUvdG9rZW5zJztcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIGFsbG93ZWQgb3B0aW9ucyBmb3IgdGhlIGVuZ2luZVxuICovXG5leHBvcnQgdHlwZSBOZ1NldHVwT3B0aW9ucyA9IFBpY2s8ybVSZW5kZXJPcHRpb25zLCAnYm9vdHN0cmFwJyB8ICdwcm92aWRlcnMnIHwgJ3B1YmxpY1BhdGgnIHwgJ2lubGluZUNyaXRpY2FsQ3NzJz47XG5cbi8qKlxuICogVGhlc2UgYXJlIHRoZSBhbGxvd2VkIG9wdGlvbnMgZm9yIHRoZSByZW5kZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJPcHRpb25zIGV4dGVuZHMgybVSZW5kZXJPcHRpb25zIHtcbiAgcmVxOiBSZXF1ZXN0O1xuICByZXM/OiBSZXNwb25zZTtcbn1cblxuLyoqXG4gKiBUaGlzIGlzIGFuIGV4cHJlc3MgZW5naW5lIGZvciBoYW5kbGluZyBBbmd1bGFyIEFwcGxpY2F0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbmdFeHByZXNzRW5naW5lKHNldHVwT3B0aW9uczogUmVhZG9ubHk8TmdTZXR1cE9wdGlvbnM+KSB7XG4gIGNvbnN0IGVuZ2luZSA9IG5ldyBDb21tb25FbmdpbmUoc2V0dXBPcHRpb25zLmJvb3RzdHJhcCwgc2V0dXBPcHRpb25zLnByb3ZpZGVycyk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmaWxlUGF0aDogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKGVycj86IEVycm9yIHwgbnVsbCwgaHRtbD86IHN0cmluZykgPT4gdm9pZCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZW5kZXJPcHRpb25zID0geyAuLi5vcHRpb25zIH0gYXMgUmVuZGVyT3B0aW9ucztcbiAgICAgIGlmICghc2V0dXBPcHRpb25zLmJvb3RzdHJhcCAmJiAhcmVuZGVyT3B0aW9ucy5ib290c3RyYXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBwYXNzIGluIGEgTmdNb2R1bGUgb3IgTmdNb2R1bGVGYWN0b3J5IHRvIGJlIGJvb3RzdHJhcHBlZCcpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXEgPSByZW5kZXJPcHRpb25zLnJlcTtcbiAgICAgIGNvbnN0IHJlcyA9IHJlbmRlck9wdGlvbnMucmVzIHx8IHJlcS5yZXM7XG5cbiAgICAgIHJlbmRlck9wdGlvbnMudXJsID1cbiAgICAgIHJlbmRlck9wdGlvbnMudXJsIHx8IGAke3JlcS5wcm90b2NvbH06Ly8keyhyZXEuZ2V0KCdob3N0JykgfHwgJycpfSR7cmVxLm9yaWdpbmFsVXJsfWA7XG4gICAgICByZW5kZXJPcHRpb25zLmRvY3VtZW50RmlsZVBhdGggPSByZW5kZXJPcHRpb25zLmRvY3VtZW50RmlsZVBhdGggfHwgZmlsZVBhdGg7XG4gICAgICByZW5kZXJPcHRpb25zLnByb3ZpZGVycyA9IFsuLi4ocmVuZGVyT3B0aW9ucy5wcm92aWRlcnMgfHwgW10pLCBnZXRSZXFSZXNQcm92aWRlcnMocmVxLCByZXMpXTtcbiAgICAgIHJlbmRlck9wdGlvbnMucHVibGljUGF0aCA9IHJlbmRlck9wdGlvbnMucHVibGljUGF0aCA/PyBzZXR1cE9wdGlvbnMucHVibGljUGF0aCA/PyAob3B0aW9ucyBhcyBhbnkpLnNldHRpbmdzPy52aWV3cyxcbiAgICAgIHJlbmRlck9wdGlvbnMuaW5saW5lQ3JpdGljYWxDc3MgPSByZW5kZXJPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzID8/IHNldHVwT3B0aW9ucy5pbmxpbmVDcml0aWNhbENzcztcblxuICAgICAgZW5naW5lLnJlbmRlcihyZW5kZXJPcHRpb25zKVxuICAgICAgICAudGhlbihodG1sID0+IGNhbGxiYWNrKG51bGwsIGh0bWwpKVxuICAgICAgICAuY2F0Y2goY2FsbGJhY2spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogR2V0IHByb3ZpZGVycyBvZiB0aGUgcmVxdWVzdCBhbmQgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gZ2V0UmVxUmVzUHJvdmlkZXJzKHJlcTogUmVxdWVzdCwgcmVzPzogUmVzcG9uc2UpOiBTdGF0aWNQcm92aWRlcltdIHtcbiAgY29uc3QgcHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJFUVVFU1QsXG4gICAgICB1c2VWYWx1ZTogcmVxXG4gICAgfVxuICBdO1xuICBpZiAocmVzKSB7XG4gICAgcHJvdmlkZXJzLnB1c2goe1xuICAgICAgcHJvdmlkZTogUkVTUE9OU0UsXG4gICAgICB1c2VWYWx1ZTogcmVzXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcHJvdmlkZXJzO1xufVxuIl19