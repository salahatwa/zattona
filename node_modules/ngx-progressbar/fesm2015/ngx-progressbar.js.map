{"version":3,"file":"ngx-progressbar.js","sources":["../../projects/ngx-progressbar/src/lib/ng-progress-ref.ts","../../projects/ngx-progressbar/src/lib/ng-progress.interface.ts","../../projects/ngx-progressbar/src/lib/ng-progress.service.ts","../../projects/ngx-progressbar/src/lib/ng-progress.component.ts","../../projects/ngx-progressbar/src/lib/ng-progress.module.ts","../../../projects/ngx-progressbar/src/public-api.ts","../../../projects/ngx-progressbar/src/ngx-progressbar.ts"],"sourcesContent":["import { Observable, Subject, BehaviorSubject, timer, of, combineLatest, Subscription, EMPTY } from 'rxjs';\nimport { tap, delay, debounce, switchMap, takeUntil, finalize, filter } from 'rxjs/operators';\nimport { NgProgressState, NgProgressConfig, ProgressConfig, ProgressState } from './ng-progress.interface';\n\nexport class NgProgressRef {\n\n  // Stream that emits when progress state is changed\n  private readonly _state: BehaviorSubject<ProgressState>;\n  state: Observable<ProgressState>;\n\n  // Stream that emits when config is changed\n  private readonly _config: BehaviorSubject<ProgressConfig>;\n  config: Observable<ProgressConfig>;\n\n  // Progress start source event (used to cancel finalizing delays)\n  private readonly _started = new Subject();\n  // Progress start event: stream that emits only when it hasn't already started\n  readonly started = this._started.pipe(filter(() => !this.isStarted));\n\n  // Progress ended source event\n  private readonly _completed = new Subject();\n  // Progress start event: stream that emits only when it has already started\n  readonly completed = this._completed.pipe(filter(() => this.isStarted));\n\n  // Stream that increments and updates the progress state\n  private readonly _trickling = new Subject<boolean>();\n\n  // Stream that combines \"_trickling\" and \"config\" streams\n  private readonly _worker = Subscription.EMPTY;\n\n  // Get current progress state\n  private get snapshot(): ProgressState {\n    return this._state.value;\n  }\n\n  // Check if progress has started\n  get isStarted(): boolean {\n    return this.snapshot.active;\n  }\n\n  constructor(customConfig: ProgressConfig, private _onDestroyCallback: () => void) {\n    this._state = new BehaviorSubject<ProgressState>({ active: false, value: 0 });\n    this._config = new BehaviorSubject<ProgressConfig>(customConfig);\n    this.state = this._state.asObservable();\n    this.config = this._config.asObservable();\n\n    this._worker = combineLatest([this._trickling, this._config]).pipe(\n      debounce(([start, config]: [boolean, ProgressConfig]) => timer(start ? config.debounceTime : 0)),\n      switchMap(([start, config]: [boolean, ProgressConfig]) => start ? this.onTrickling(config) : this.onComplete(config))\n    ).subscribe();\n  }\n\n  /**\n   * Start the progress\n   */\n  start() {\n    this._started.next();\n    this._trickling.next(true);\n  }\n\n  /**\n   * Complete the progress\n   */\n  complete() {\n    this._trickling.next(false);\n  }\n\n  /**\n   * Increment the progress\n   */\n  inc(amount?: number) {\n    const n = this.snapshot.value;\n    if (!this.isStarted) {\n      this.start();\n    } else {\n      if (typeof amount !== 'number') {\n        amount = this._config.value.trickleFunc(n);\n      }\n      this.set(n + amount);\n    }\n  }\n\n  /**\n   * Set the progress\n   */\n  set(n: number) {\n    this.setState({ value: this.clamp(n), active: true });\n  }\n\n  /**\n   * Set config\n   */\n  setConfig(config: NgProgressConfig) {\n    this._config.next({ ...this._config.value, ...config });\n  }\n\n  /**\n   * Destroy progress reference\n   */\n  destroy() {\n    this._worker.unsubscribe();\n    this._trickling.complete();\n    this._state.complete();\n    this._config.complete();\n    this._started.complete();\n    this._completed.complete();\n    this._onDestroyCallback();\n  }\n\n  /**\n   * Set progress state\n   */\n  private setState(state: NgProgressState) {\n    this._state.next({ ...this.snapshot, ...state });\n  }\n\n  /**\n   * Clamps a value to be between min and max\n   */\n  private clamp(n: number): number {\n    return Math.max(this._config.value.min, Math.min(this._config.value.max, n));\n  }\n\n  /**\n   * Keeps incrementing the progress\n   */\n  private onTrickling(config: ProgressConfig): Observable<number> {\n    if (!this.isStarted) {\n      this.set(this._config.value.min);\n    }\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\n  }\n\n  /**\n   * Completes then resets the progress\n   */\n  private onComplete(config: ProgressConfig): Observable<any> {\n    this._completed.next();\n    return !this.isStarted ? EMPTY : of({}).pipe(\n      // Complete the progress\n      tap(() => this.setState({ value: 100 })),\n\n      // Deactivate the progress after a tiny delay\n      delay(config.speed * 1.7),\n      tap(() => this.setState({ active: false })),\n\n      // Use a tiny delay before resetting\n      delay(config.speed),\n      // Force the progress to reset even it got cancelled\n      finalize(() => this.setState({ value: 0 })),\n      // Cancel any of the finalizing delays if the progress has started again\n      takeUntil(this._started)\n    );\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport interface ProgressState {\n  active: boolean;\n  value: number;\n}\n\nexport interface ProgressConfig {\n  spinnerPosition: 'left' | 'right';\n  direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';\n  ease: string;\n  color: string;\n  thick: boolean;\n  fixed: boolean;\n  meteor: boolean;\n  spinner: boolean;\n  max: number;\n  min: number;\n  speed: number;\n  trickleSpeed: number;\n  trickleFunc: (n: number) => number;\n  debounceTime: number;\n}\n\nexport type NgProgressState = Partial<ProgressState>;\n\nexport type NgProgressConfig = Partial<ProgressConfig>;\n\nexport const NG_PROGRESS_CONFIG = new InjectionToken<NgProgressConfig>('ngProgressConfig');\n","import { Injectable, Inject, Optional } from '@angular/core';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { NgProgressConfig, ProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\n\nconst defaultConfig: ProgressConfig = {\n  min: 8,\n  max: 100,\n  speed: 200,\n  debounceTime: 0,\n  trickleSpeed: 300,\n  fixed: true,\n  meteor: true,\n  thick: false,\n  spinner: true,\n  ease: 'linear',\n  color: '#1B95E0',\n  direction: 'ltr+',\n  spinnerPosition: 'right',\n  trickleFunc: (n: number): number => {\n    if (n >= 0 && n < 20) return 10;\n    if (n >= 20 && n < 50) return 4;\n    if (n >= 50 && n < 80) return 2;\n    if (n >= 80 && n < 99) return 0.5;\n    return 0;\n  }\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgProgress {\n\n  // Store progress bar instances\n  private readonly _instances = new Map<string, NgProgressRef>();\n\n  // Global config\n  config: ProgressConfig;\n\n  constructor(@Optional() @Inject(NG_PROGRESS_CONFIG) config: NgProgressConfig) {\n    this.config = config ? { ...defaultConfig, ...config } : defaultConfig;\n  }\n\n  /**\n   * Get or Create progress bar by ID\n   */\n  ref(id = 'root', config?: NgProgressConfig): NgProgressRef {\n    if (this._instances.has(id)) {\n      // Get ProgressRef instance\n      const progressRef = this._instances.get(id) as NgProgressRef;\n      if (config) {\n        progressRef.setConfig({ ...this.config, ...config });\n      }\n      return progressRef as NgProgressRef;\n    } else {\n      // Create new ProgressRef instance\n      const progressRef = new NgProgressRef({ ...this.config, ...config }, this.deleteInstance(id));\n      return this._instances.set(id, progressRef).get(id) as NgProgressRef;\n    }\n  }\n\n  /**\n   * Destroy all progress bar instances\n   */\n  destroyAll() {\n    this._instances.forEach((ref: NgProgressRef) => ref.destroy());\n  }\n\n  /**\n   * A destroyer function for each progress bar instance\n   */\n  private deleteInstance(id: string): () => void {\n    return () => {\n      this._instances.delete(id);\n    };\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NgProgress } from './ng-progress.service';\nimport { NgProgressRef } from './ng-progress-ref';\nimport { ProgressState } from './ng-progress.interface';\n\n@Component({\n  selector: 'ng-progress',\n  host: {\n    'role': 'progressbar',\n    '[attr.spinnerPosition]': 'spinnerPosition',\n    '[attr.dir]': 'direction',\n    '[attr.thick]': 'thick',\n    '[attr.fixed]': 'fixed'\n  },\n  template: `\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\"\n           [attr.active]=\"state.active\"\n           [style.transition]=\"'opacity ' + speed + 'ms ' + ease\">\n        <div class=\"ng-bar-placeholder\">\n          <div class=\"ng-bar\"\n               [style.transform]=\"state.transform\"\n               [style.backgroundColor]=\"color\"\n               [style.transition]=\"state.active ? 'all ' + speed + 'ms ' + ease : 'none'\">\n            <div *ngIf=\"meteor\" class=\"ng-meteor\" [style.boxShadow]=\"'0 0 10px '+ color + ', 0 0 5px ' + color\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"ng-spinner\">\n          <div class=\"ng-spinner-icon\"\n               [style.borderTopColor]=\"color\"\n               [style.borderLeftColor]=\"color\"></div>\n        </div>\n      </div>\n    </ng-container>\n  `,\n  styleUrls: ['./ng-progress.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\n\n  private _started!: Subscription;\n  private _completed!: Subscription;\n\n  /** Progress bar worker */\n  progressRef!: NgProgressRef;\n\n  /** Stream that emits progress state */\n  state$!: Observable<{ active: boolean, transform: string }>;\n\n  /** Creates a new instance if id is not already exists */\n  @Input() id = 'root';\n\n  /** Initializes inputs from the global config */\n  @Input() min: number = this._ngProgress.config.min;\n  @Input() max: number = this._ngProgress.config.max;\n  @Input() ease: string = this._ngProgress.config.ease;\n  @Input() color: string = this._ngProgress.config.color;\n  @Input() speed: number = this._ngProgress.config.speed;\n  @Input() thick: boolean = this._ngProgress.config.thick;\n  @Input() fixed: boolean = this._ngProgress.config.fixed;\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\n  @Input() debounceTime: number = this._ngProgress.config.debounceTime;\n  @Input() trickleFunc: (n: number) => number = this._ngProgress.config.trickleFunc;\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\n  @Output() started = new EventEmitter();\n  @Output() completed = new EventEmitter();\n\n  get isStarted() {\n    return this.progressRef?.isStarted;\n  }\n\n  constructor(private _ngProgress: NgProgress) {\n  }\n\n  ngOnChanges() {\n     // Update progress bar config when inputs change\n    this.progressRef?.setConfig({\n      max: (this.max > 0 && this.max <= 100) ? this.max : 100,\n      min: (this.min < 100 && this.min >= 0) ? this.min : 0,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      trickleFunc: this.trickleFunc,\n      debounceTime: this.debounceTime\n    });\n  }\n\n  ngOnInit() {\n    // Get progress bar service instance\n    this.progressRef = this._ngProgress.ref(this.id, {\n      max: this.max,\n      min: this.min,\n      speed: this.speed,\n      trickleSpeed: this.trickleSpeed,\n      debounceTime: this.debounceTime\n    });\n\n    // Subscribe to progress state\n    this.state$ = this.progressRef.state.pipe(\n      map((state: ProgressState) => ({\n        active: state.active,\n        transform: `translate3d(${ state.value }%,0,0)`\n      }))\n    );\n\n    // Subscribes to started and completed events on demand\n    if (this.started.observers.length) {\n      this._started = this.progressRef.started.subscribe(() => this.started.emit());\n    }\n    if (this.completed.observers.length) {\n      this._completed = this.progressRef.completed.subscribe(() => this.completed.emit());\n    }\n  }\n\n  ngOnDestroy() {\n    this._started?.unsubscribe();\n    this._completed?.unsubscribe();\n    this.progressRef?.destroy();\n  }\n\n  start() {\n    this.progressRef.start();\n  }\n\n  complete() {\n    this.progressRef.complete();\n  }\n\n  inc(n?: number) {\n    this.progressRef.inc(n);\n  }\n\n  set(n: number) {\n    this.progressRef.set(n);\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgProgressComponent } from './ng-progress.component';\nimport { NgProgressConfig, NG_PROGRESS_CONFIG } from './ng-progress.interface';\n\n@NgModule({\n  declarations: [NgProgressComponent],\n  exports: [NgProgressComponent],\n  imports: [CommonModule]\n})\nexport class NgProgressModule {\n  static withConfig(config: NgProgressConfig): ModuleWithProviders<NgProgressModule> {\n    return {\n      ngModule: NgProgressModule,\n      providers: [\n        {provide: NG_PROGRESS_CONFIG, useValue: config}\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-progressbar\n */\n\nexport * from './lib/ng-progress-ref';\nexport * from './lib/ng-progress.component';\nexport * from './lib/ng-progress.module';\nexport * from './lib/ng-progress.service';\nexport * from './lib/ng-progress.interface';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}