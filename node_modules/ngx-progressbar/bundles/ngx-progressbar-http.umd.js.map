{"version":3,"file":"ngx-progressbar-http.umd.js","sources":["../../../projects/ngx-progressbar/http/src/ng-progress-http.interface.ts","../../../projects/ngx-progressbar/http/src/ng-progress.interceptor.ts","../../../projects/ngx-progressbar/http/src/ng-progress-http.module.ts","../../../projects/ngx-progressbar/http/src/ngx-progressbar-http.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface ProgressHttpConfig {\n  id: string;\n  silentApis: string[];\n}\n\nexport type NgProgressHttpConfig = Partial<ProgressHttpConfig>;\n\nexport const NG_PROGRESS_HTTP_CONFIG = new InjectionToken<NgProgressHttpConfig>('ngProgressHttpConfig');\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { NgProgress, NgProgressRef } from 'ngx-progressbar';\nimport { NgProgressHttpConfig, ProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\n\n@Injectable()\nexport class NgProgressInterceptor implements HttpInterceptor {\n\n  private _inProgressCount = 0;\n  private _progressRef!: NgProgressRef;\n  private readonly _config: ProgressHttpConfig = {\n    id: 'root',\n    silentApis: []\n  };\n\n  constructor(protected ngProgress: NgProgress, @Optional() @Inject(NG_PROGRESS_HTTP_CONFIG) config?: NgProgressHttpConfig) {\n    this._config = config ? {...this._config, ...config} : this._config;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Ignore by request headers\n    if (req.headers.has('ignoreProgressBar')) {\n      return next.handle(req.clone({headers: req.headers.delete('ignoreProgressBar')}));\n    }\n\n    // Ignore silent api requests\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n\n    this._progressRef = this.ngProgress.ref(this._config.id);\n    if (!this._progressRef.isStarted) {\n      this._progressRef.start();\n    }\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        this._inProgressCount--;\n        if (this._inProgressCount === 0) {\n          this._progressRef.complete();\n        }\n      })\n    );\n  }\n\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n  private checkUrl(req: HttpRequest<any>): boolean {\n    const url = req.url.toLowerCase();\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\n    return !!found;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\n\n@NgModule({\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n  ]\n})\nexport class NgProgressHttpModule {\n  static withConfig(config: NgProgressHttpConfig): ModuleWithProviders<NgProgressHttpModule> {\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [\n        { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {NgProgressInterceptor as Éµa} from './ng-progress.interceptor';"],"names":["InjectionToken","finalize","Injectable","NgProgress","Optional","Inject","NgModule","HTTP_INTERCEPTORS"],"mappings":";;;;;;QASa,uBAAuB,GAAG,IAAIA,mBAAc,CAAuB,sBAAsB;;;QCQpG,+BAAsB,UAAsB,EAA+C,MAA6B;YAAlG,eAAU,GAAV,UAAU,CAAY;YAPpC,qBAAgB,GAAG,CAAC,CAAC;YAEZ,YAAO,GAAuB;gBAC7C,EAAE,EAAE,MAAM;gBACV,UAAU,EAAE,EAAE;aACf,CAAC;YAGA,IAAI,CAAC,OAAO,GAAG,MAAM,mCAAO,IAAI,CAAC,OAAO,GAAK,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC;SACrE;QAED,yCAAS,GAAT,UAAU,GAAqB,EAAE,IAAiB;YAAlD,iBA2BC;;YAxBC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;gBACxC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAC,CAAC,CAAC,CAAC;aACnF;;YAGD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACtB,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACzB;YAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAExB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE;gBAChC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;aAC3B;YAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1BC,kBAAQ,CAAC;gBACP,KAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,KAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;oBAC/B,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;iBAC9B;aACF,CAAC,CACH,CAAC;SACH;;;;;QAMO,wCAAQ,GAAR,UAAS,GAAqB;YACpC,IAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC;YAClC,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,UAAC,CAAC,IAAK,OAAA,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;YACrE,OAAO,CAAC,CAAC,KAAK,CAAC;SAChB;;;;gBAnDFC,eAAU;;;gBAHFC,yBAAU;gDAa8BC,aAAQ,YAAIC,WAAM,SAAC,uBAAuB;;;;QCP3F;;QACS,+BAAU,GAAjB,UAAkB,MAA4B;YAC5C,OAAO;gBACL,QAAQ,EAAE,oBAAoB;gBAC9B,SAAS,EAAE;oBACT,EAAE,OAAO,EAAE,uBAAuB,EAAE,QAAQ,EAAE,MAAM,EAAE;iBACvD;aACF,CAAC;SACH;;;;gBAbFC,aAAQ,SAAC;oBACR,SAAS,EAAE;wBACT,EAAE,OAAO,EAAEC,sBAAiB,EAAE,QAAQ,EAAE,qBAAqB,EAAE,KAAK,EAAE,IAAI,EAAE;qBAC7E;iBACF;;;ICTD;;;;;;;;;;;;;;"}