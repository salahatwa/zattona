(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs/operators'), require('ngx-progressbar')) :
    typeof define === 'function' && define.amd ? define('ngx-progressbar/http', ['exports', '@angular/core', '@angular/common/http', 'rxjs/operators', 'ngx-progressbar'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ngx-progressbar'] = global['ngx-progressbar'] || {}, global['ngx-progressbar'].http = {}), global.ng.core, global.ng.common.http, global.rxjs.operators, global['ngx-progressbar']));
}(this, (function (exports, core, http, operators, ngxProgressbar) { 'use strict';

    var NG_PROGRESS_HTTP_CONFIG = new core.InjectionToken('ngProgressHttpConfig');

    var NgProgressInterceptor = /** @class */ (function () {
        function NgProgressInterceptor(ngProgress, config) {
            this.ngProgress = ngProgress;
            this._inProgressCount = 0;
            this._config = {
                id: 'root',
                silentApis: []
            };
            this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
        }
        NgProgressInterceptor.prototype.intercept = function (req, next) {
            var _this = this;
            // Ignore by request headers
            if (req.headers.has('ignoreProgressBar')) {
                return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
            }
            // Ignore silent api requests
            if (this.checkUrl(req)) {
                return next.handle(req);
            }
            this._inProgressCount++;
            this._progressRef = this.ngProgress.ref(this._config.id);
            if (!this._progressRef.isStarted) {
                this._progressRef.start();
            }
            return next.handle(req).pipe(operators.finalize(function () {
                _this._inProgressCount--;
                if (_this._inProgressCount === 0) {
                    _this._progressRef.complete();
                }
            }));
        };
        /**
         * Check if request is silent.
         * @param req request
         */
        NgProgressInterceptor.prototype.checkUrl = function (req) {
            var url = req.url.toLowerCase();
            var found = this._config.silentApis.find(function (u) { return url.startsWith(u); });
            return !!found;
        };
        return NgProgressInterceptor;
    }());
    NgProgressInterceptor.decorators = [
        { type: core.Injectable }
    ];
    NgProgressInterceptor.ctorParameters = function () { return [
        { type: ngxProgressbar.NgProgress },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
    ]; };

    var NgProgressHttpModule = /** @class */ (function () {
        function NgProgressHttpModule() {
        }
        NgProgressHttpModule.withConfig = function (config) {
            return {
                ngModule: NgProgressHttpModule,
                providers: [
                    { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }
                ]
            };
        };
        return NgProgressHttpModule;
    }());
    NgProgressHttpModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        { provide: http.HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }
                    ]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NG_PROGRESS_HTTP_CONFIG = NG_PROGRESS_HTTP_CONFIG;
    exports.NgProgressHttpModule = NgProgressHttpModule;
    exports.Éµa = NgProgressInterceptor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-progressbar-http.umd.js.map
