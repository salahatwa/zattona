{"version":3,"sources":["../../../projects/ngx-progressbar/http/src/ng-progress-http.interface.ts","../../../projects/ngx-progressbar/http/src/ng-progress.interceptor.ts","../../../projects/ngx-progressbar/http/src/ng-progress-http.module.ts"],"names":["NG_PROGRESS_HTTP_CONFIG","InjectionToken","NgProgressInterceptor","ngProgress","config","this","_inProgressCount","_config","id","silentApis","Object","assign","prototype","intercept","req","next","_this","headers","has","handle","clone","delete","checkUrl","_progressRef","ref","isStarted","start","pipe","finalize","complete","url","toLowerCase","find","u","startsWith","Injectable","NgProgress","Optional","type","Inject","args","NgProgressHttpModule","withConfig","ngModule","providers","provide","useValue","NgModule","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"2kBASaA,EAA0B,IAAIC,EAAAA,eAAqC,qCCQ9E,SAAAC,EAAsBC,EAAqEC,GAArEC,KAAAF,WAAAA,EAPdE,KAAAC,iBAAmB,EAEVD,KAAAE,QAA8B,CAC7CC,GAAI,OACJC,WAAY,IAIZJ,KAAKE,QAAUH,EAAMM,OAAAC,OAAAD,OAAAC,OAAA,GAAON,KAAKE,SAAYH,GAAUC,KAAKE,eAG9DL,EAAAU,UAAAC,UAAA,SAAUC,EAAuBC,GAAjC,IAAAC,EAAAX,KAGE,OAAIS,EAAIG,QAAQC,IAAI,qBACXH,EAAKI,OAAOL,EAAIM,MAAM,CAACH,QAASH,EAAIG,QAAQI,OAAO,wBAIxDhB,KAAKiB,SAASR,GACTC,EAAKI,OAAOL,IAGrBT,KAAKC,mBAELD,KAAKkB,aAAelB,KAAKF,WAAWqB,IAAInB,KAAKE,QAAQC,IAChDH,KAAKkB,aAAaE,WACrBpB,KAAKkB,aAAaG,QAGbX,EAAKI,OAAOL,GAAKa,KACtBC,EAAAA,UAAS,WACPZ,EAAKV,mBACyB,IAA1BU,EAAKV,kBACPU,EAAKO,aAAaM,iBAUlB3B,EAAAU,UAAAU,SAAA,SAASR,GACf,IAAMgB,EAAMhB,EAAIgB,IAAIC,cAEpB,QADc1B,KAAKE,QAAQE,WAAWuB,MAAK,SAACC,GAAM,OAAAH,EAAII,WAAWD,gCAjDpEE,EAAAA,sDAHQC,EAAAA,2CAawCC,EAAAA,UAAQ,CAAAC,KAAIC,EAAAA,OAAMC,KAAA,CAACxC,yBCPpE,SAAAyC,YACSA,EAAAC,WAAP,SAAkBtC,GAChB,MAAO,CACLuC,SAAUF,EACVG,UAAW,CACT,CAAEC,QAAS7C,EAAyB8C,SAAU1C,+BAVrD2C,EAAAA,SAAQP,KAAA,CAAC,CACRI,UAAW,CACT,CAAEC,QAASG,EAAAA,kBAAmBC,SAAU/C,EAAuBgD,OAAO","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface ProgressHttpConfig {\n  id: string;\n  silentApis: string[];\n}\n\nexport type NgProgressHttpConfig = Partial<ProgressHttpConfig>;\n\nexport const NG_PROGRESS_HTTP_CONFIG = new InjectionToken<NgProgressHttpConfig>('ngProgressHttpConfig');\n","import { Injectable, Optional, Inject } from '@angular/core';\nimport { HttpInterceptor, HttpEvent, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { NgProgress, NgProgressRef } from 'ngx-progressbar';\nimport { NgProgressHttpConfig, ProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\n\n@Injectable()\nexport class NgProgressInterceptor implements HttpInterceptor {\n\n  private _inProgressCount = 0;\n  private _progressRef!: NgProgressRef;\n  private readonly _config: ProgressHttpConfig = {\n    id: 'root',\n    silentApis: []\n  };\n\n  constructor(protected ngProgress: NgProgress, @Optional() @Inject(NG_PROGRESS_HTTP_CONFIG) config?: NgProgressHttpConfig) {\n    this._config = config ? {...this._config, ...config} : this._config;\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Ignore by request headers\n    if (req.headers.has('ignoreProgressBar')) {\n      return next.handle(req.clone({headers: req.headers.delete('ignoreProgressBar')}));\n    }\n\n    // Ignore silent api requests\n    if (this.checkUrl(req)) {\n      return next.handle(req);\n    }\n\n    this._inProgressCount++;\n\n    this._progressRef = this.ngProgress.ref(this._config.id);\n    if (!this._progressRef.isStarted) {\n      this._progressRef.start();\n    }\n\n    return next.handle(req).pipe(\n      finalize(() => {\n        this._inProgressCount--;\n        if (this._inProgressCount === 0) {\n          this._progressRef.complete();\n        }\n      })\n    );\n  }\n\n  /**\n   * Check if request is silent.\n   * @param req request\n   */\n  private checkUrl(req: HttpRequest<any>): boolean {\n    const url = req.url.toLowerCase();\n    const found = this._config.silentApis.find((u) => url.startsWith(u));\n    return !!found;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { NgProgressInterceptor } from './ng-progress.interceptor';\nimport { NgProgressHttpConfig, NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';\n\n@NgModule({\n  providers: [\n    { provide: HTTP_INTERCEPTORS, useClass: NgProgressInterceptor, multi: true }\n  ]\n})\nexport class NgProgressHttpModule {\n  static withConfig(config: NgProgressHttpConfig): ModuleWithProviders<NgProgressHttpModule> {\n    return {\n      ngModule: NgProgressHttpModule,\n      providers: [\n        { provide: NG_PROGRESS_HTTP_CONFIG, useValue: config }\n      ]\n    };\n  }\n}\n"]}