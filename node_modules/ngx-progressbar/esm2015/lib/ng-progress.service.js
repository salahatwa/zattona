import { Injectable, Inject, Optional } from '@angular/core';
import { NgProgressRef } from './ng-progress-ref';
import { NG_PROGRESS_CONFIG } from './ng-progress.interface';
import * as i0 from "@angular/core";
import * as i1 from "./ng-progress.interface";
const ɵ0 = (n) => {
    if (n >= 0 && n < 20)
        return 10;
    if (n >= 20 && n < 50)
        return 4;
    if (n >= 50 && n < 80)
        return 2;
    if (n >= 80 && n < 99)
        return 0.5;
    return 0;
};
const defaultConfig = {
    min: 8,
    max: 100,
    speed: 200,
    debounceTime: 0,
    trickleSpeed: 300,
    fixed: true,
    meteor: true,
    thick: false,
    spinner: true,
    ease: 'linear',
    color: '#1B95E0',
    direction: 'ltr+',
    spinnerPosition: 'right',
    trickleFunc: ɵ0
};
export class NgProgress {
    constructor(config) {
        // Store progress bar instances
        this._instances = new Map();
        this.config = config ? Object.assign(Object.assign({}, defaultConfig), config) : defaultConfig;
    }
    /**
     * Get or Create progress bar by ID
     */
    ref(id = 'root', config) {
        if (this._instances.has(id)) {
            // Get ProgressRef instance
            const progressRef = this._instances.get(id);
            if (config) {
                progressRef.setConfig(Object.assign(Object.assign({}, this.config), config));
            }
            return progressRef;
        }
        else {
            // Create new ProgressRef instance
            const progressRef = new NgProgressRef(Object.assign(Object.assign({}, this.config), config), this.deleteInstance(id));
            return this._instances.set(id, progressRef).get(id);
        }
    }
    /**
     * Destroy all progress bar instances
     */
    destroyAll() {
        this._instances.forEach((ref) => ref.destroy());
    }
    /**
     * A destroyer function for each progress bar instance
     */
    deleteInstance(id) {
        return () => {
            this._instances.delete(id);
        };
    }
}
NgProgress.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgProgress_Factory() { return new NgProgress(i0.ɵɵinject(i1.NG_PROGRESS_CONFIG, 8)); }, token: NgProgress, providedIn: "root" });
NgProgress.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgProgress.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_CONFIG,] }] }
];
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3Muc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi9wcm9qZWN0cy9uZ3gtcHJvZ3Jlc3NiYXIvc3JjLyIsInNvdXJjZXMiOlsibGliL25nLXByb2dyZXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQW9DLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7OztXQWdCaEYsQ0FBQyxDQUFTLEVBQVUsRUFBRTtJQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLEVBQUUsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNsQyxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUM7QUFwQkgsTUFBTSxhQUFhLEdBQW1CO0lBQ3BDLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLEdBQUc7SUFDUixLQUFLLEVBQUUsR0FBRztJQUNWLFlBQVksRUFBRSxDQUFDO0lBQ2YsWUFBWSxFQUFFLEdBQUc7SUFDakIsS0FBSyxFQUFFLElBQUk7SUFDWCxNQUFNLEVBQUUsSUFBSTtJQUNaLEtBQUssRUFBRSxLQUFLO0lBQ1osT0FBTyxFQUFFLElBQUk7SUFDYixJQUFJLEVBQUUsUUFBUTtJQUNkLEtBQUssRUFBRSxTQUFTO0lBQ2hCLFNBQVMsRUFBRSxNQUFNO0lBQ2pCLGVBQWUsRUFBRSxPQUFPO0lBQ3hCLFdBQVcsSUFNVjtDQUNGLENBQUM7QUFLRixNQUFNLE9BQU8sVUFBVTtJQVFyQixZQUFvRCxNQUF3QjtRQU41RSwrQkFBK0I7UUFDZCxlQUFVLEdBQUcsSUFBSSxHQUFHLEVBQXlCLENBQUM7UUFNN0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxpQ0FBTSxhQUFhLEdBQUssTUFBTSxFQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDekUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsR0FBRyxDQUFDLEVBQUUsR0FBRyxNQUFNLEVBQUUsTUFBeUI7UUFDeEMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUMzQiwyQkFBMkI7WUFDM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFrQixDQUFDO1lBQzdELElBQUksTUFBTSxFQUFFO2dCQUNWLFdBQVcsQ0FBQyxTQUFTLGlDQUFNLElBQUksQ0FBQyxNQUFNLEdBQUssTUFBTSxFQUFHLENBQUM7YUFDdEQ7WUFDRCxPQUFPLFdBQTRCLENBQUM7U0FDckM7YUFBTTtZQUNMLGtDQUFrQztZQUNsQyxNQUFNLFdBQVcsR0FBRyxJQUFJLGFBQWEsaUNBQU0sSUFBSSxDQUFDLE1BQU0sR0FBSyxNQUFNLEdBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQWtCLENBQUM7U0FDdEU7SUFDSCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFrQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7O09BRUc7SUFDSyxjQUFjLENBQUMsRUFBVTtRQUMvQixPQUFPLEdBQUcsRUFBRTtZQUNWLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQztJQUNKLENBQUM7Ozs7WUEvQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7NENBU2MsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ1Byb2dyZXNzUmVmIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy1yZWYnO1xuaW1wb3J0IHsgTmdQcm9ncmVzc0NvbmZpZywgUHJvZ3Jlc3NDb25maWcsIE5HX1BST0dSRVNTX0NPTkZJRyB9IGZyb20gJy4vbmctcHJvZ3Jlc3MuaW50ZXJmYWNlJztcblxuY29uc3QgZGVmYXVsdENvbmZpZzogUHJvZ3Jlc3NDb25maWcgPSB7XG4gIG1pbjogOCxcbiAgbWF4OiAxMDAsXG4gIHNwZWVkOiAyMDAsXG4gIGRlYm91bmNlVGltZTogMCxcbiAgdHJpY2tsZVNwZWVkOiAzMDAsXG4gIGZpeGVkOiB0cnVlLFxuICBtZXRlb3I6IHRydWUsXG4gIHRoaWNrOiBmYWxzZSxcbiAgc3Bpbm5lcjogdHJ1ZSxcbiAgZWFzZTogJ2xpbmVhcicsXG4gIGNvbG9yOiAnIzFCOTVFMCcsXG4gIGRpcmVjdGlvbjogJ2x0cisnLFxuICBzcGlubmVyUG9zaXRpb246ICdyaWdodCcsXG4gIHRyaWNrbGVGdW5jOiAobjogbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAobiA+PSAwICYmIG4gPCAyMCkgcmV0dXJuIDEwO1xuICAgIGlmIChuID49IDIwICYmIG4gPCA1MCkgcmV0dXJuIDQ7XG4gICAgaWYgKG4gPj0gNTAgJiYgbiA8IDgwKSByZXR1cm4gMjtcbiAgICBpZiAobiA+PSA4MCAmJiBuIDwgOTkpIHJldHVybiAwLjU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3Mge1xuXG4gIC8vIFN0b3JlIHByb2dyZXNzIGJhciBpbnN0YW5jZXNcbiAgcHJpdmF0ZSByZWFkb25seSBfaW5zdGFuY2VzID0gbmV3IE1hcDxzdHJpbmcsIE5nUHJvZ3Jlc3NSZWY+KCk7XG5cbiAgLy8gR2xvYmFsIGNvbmZpZ1xuICBjb25maWc6IFByb2dyZXNzQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfQ09ORklHKSBjb25maWc6IE5nUHJvZ3Jlc3NDb25maWcpIHtcbiAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyA/IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH0gOiBkZWZhdWx0Q29uZmlnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvciBDcmVhdGUgcHJvZ3Jlc3MgYmFyIGJ5IElEXG4gICAqL1xuICByZWYoaWQgPSAncm9vdCcsIGNvbmZpZz86IE5nUHJvZ3Jlc3NDb25maWcpOiBOZ1Byb2dyZXNzUmVmIHtcbiAgICBpZiAodGhpcy5faW5zdGFuY2VzLmhhcyhpZCkpIHtcbiAgICAgIC8vIEdldCBQcm9ncmVzc1JlZiBpbnN0YW5jZVxuICAgICAgY29uc3QgcHJvZ3Jlc3NSZWYgPSB0aGlzLl9pbnN0YW5jZXMuZ2V0KGlkKSBhcyBOZ1Byb2dyZXNzUmVmO1xuICAgICAgaWYgKGNvbmZpZykge1xuICAgICAgICBwcm9ncmVzc1JlZi5zZXRDb25maWcoeyAuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyZXNzUmVmIGFzIE5nUHJvZ3Jlc3NSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENyZWF0ZSBuZXcgUHJvZ3Jlc3NSZWYgaW5zdGFuY2VcbiAgICAgIGNvbnN0IHByb2dyZXNzUmVmID0gbmV3IE5nUHJvZ3Jlc3NSZWYoeyAuLi50aGlzLmNvbmZpZywgLi4uY29uZmlnIH0sIHRoaXMuZGVsZXRlSW5zdGFuY2UoaWQpKTtcbiAgICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZXMuc2V0KGlkLCBwcm9ncmVzc1JlZikuZ2V0KGlkKSBhcyBOZ1Byb2dyZXNzUmVmO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGFsbCBwcm9ncmVzcyBiYXIgaW5zdGFuY2VzXG4gICAqL1xuICBkZXN0cm95QWxsKCkge1xuICAgIHRoaXMuX2luc3RhbmNlcy5mb3JFYWNoKChyZWY6IE5nUHJvZ3Jlc3NSZWYpID0+IHJlZi5kZXN0cm95KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgZGVzdHJveWVyIGZ1bmN0aW9uIGZvciBlYWNoIHByb2dyZXNzIGJhciBpbnN0YW5jZVxuICAgKi9cbiAgcHJpdmF0ZSBkZWxldGVJbnN0YW5jZShpZDogc3RyaW5nKTogKCkgPT4gdm9pZCB7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMuX2luc3RhbmNlcy5kZWxldGUoaWQpO1xuICAgIH07XG4gIH1cbn1cbiJdfQ==