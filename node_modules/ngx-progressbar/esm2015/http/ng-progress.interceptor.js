import { Injectable, Optional, Inject } from '@angular/core';
import { finalize } from 'rxjs/operators';
import { NgProgress } from 'ngx-progressbar';
import { NG_PROGRESS_HTTP_CONFIG } from './ng-progress-http.interface';
export class NgProgressInterceptor {
    constructor(ngProgress, config) {
        this.ngProgress = ngProgress;
        this._inProgressCount = 0;
        this._config = {
            id: 'root',
            silentApis: []
        };
        this._config = config ? Object.assign(Object.assign({}, this._config), config) : this._config;
    }
    intercept(req, next) {
        // Ignore by request headers
        if (req.headers.has('ignoreProgressBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreProgressBar') }));
        }
        // Ignore silent api requests
        if (this.checkUrl(req)) {
            return next.handle(req);
        }
        this._inProgressCount++;
        this._progressRef = this.ngProgress.ref(this._config.id);
        if (!this._progressRef.isStarted) {
            this._progressRef.start();
        }
        return next.handle(req).pipe(finalize(() => {
            this._inProgressCount--;
            if (this._inProgressCount === 0) {
                this._progressRef.complete();
            }
        }));
    }
    /**
     * Check if request is silent.
     * @param req request
     */
    checkUrl(req) {
        const url = req.url.toLowerCase();
        const found = this._config.silentApis.find((u) => url.startsWith(u));
        return !!found;
    }
}
NgProgressInterceptor.decorators = [
    { type: Injectable }
];
NgProgressInterceptor.ctorParameters = () => [
    { type: NgProgress },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_PROGRESS_HTTP_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXByb2dyZXNzYmFyL2h0dHAvc3JjLyIsInNvdXJjZXMiOlsibmctcHJvZ3Jlc3MuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsVUFBVSxFQUFpQixNQUFNLGlCQUFpQixDQUFDO0FBQzVELE9BQU8sRUFBNEMsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUdqSCxNQUFNLE9BQU8scUJBQXFCO0lBU2hDLFlBQXNCLFVBQXNCLEVBQStDLE1BQTZCO1FBQWxHLGVBQVUsR0FBVixVQUFVLENBQVk7UUFQcEMscUJBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBRVosWUFBTyxHQUF1QjtZQUM3QyxFQUFFLEVBQUUsTUFBTTtZQUNWLFVBQVUsRUFBRSxFQUFFO1NBQ2YsQ0FBQztRQUdBLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsaUNBQUssSUFBSSxDQUFDLE9BQU8sR0FBSyxNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEUsQ0FBQztJQUVELFNBQVMsQ0FBQyxHQUFxQixFQUFFLElBQWlCO1FBRWhELDRCQUE0QjtRQUM1QixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLEVBQUU7WUFDeEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQztTQUNuRjtRQUVELDZCQUE2QjtRQUM3QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCO1FBRUQsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFeEIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzNCO1FBRUQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FDMUIsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQ3hCLElBQUksSUFBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsRUFBRTtnQkFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUSxDQUFDLEdBQXFCO1FBQ3BDLE1BQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckUsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQW5ERixVQUFVOzs7WUFIRixVQUFVOzRDQWE4QixRQUFRLFlBQUksTUFBTSxTQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBJbnRlcmNlcHRvciwgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaW5hbGl6ZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IE5nUHJvZ3Jlc3MsIE5nUHJvZ3Jlc3NSZWYgfSBmcm9tICduZ3gtcHJvZ3Jlc3NiYXInO1xuaW1wb3J0IHsgTmdQcm9ncmVzc0h0dHBDb25maWcsIFByb2dyZXNzSHR0cENvbmZpZywgTkdfUFJPR1JFU1NfSFRUUF9DT05GSUcgfSBmcm9tICcuL25nLXByb2dyZXNzLWh0dHAuaW50ZXJmYWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5nUHJvZ3Jlc3NJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG5cbiAgcHJpdmF0ZSBfaW5Qcm9ncmVzc0NvdW50ID0gMDtcbiAgcHJpdmF0ZSBfcHJvZ3Jlc3NSZWYhOiBOZ1Byb2dyZXNzUmVmO1xuICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc6IFByb2dyZXNzSHR0cENvbmZpZyA9IHtcbiAgICBpZDogJ3Jvb3QnLFxuICAgIHNpbGVudEFwaXM6IFtdXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIG5nUHJvZ3Jlc3M6IE5nUHJvZ3Jlc3MsIEBPcHRpb25hbCgpIEBJbmplY3QoTkdfUFJPR1JFU1NfSFRUUF9DT05GSUcpIGNvbmZpZz86IE5nUHJvZ3Jlc3NIdHRwQ29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gY29uZmlnID8gey4uLnRoaXMuX2NvbmZpZywgLi4uY29uZmlnfSA6IHRoaXMuX2NvbmZpZztcbiAgfVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuXG4gICAgLy8gSWdub3JlIGJ5IHJlcXVlc3QgaGVhZGVyc1xuICAgIGlmIChyZXEuaGVhZGVycy5oYXMoJ2lnbm9yZVByb2dyZXNzQmFyJykpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEuY2xvbmUoe2hlYWRlcnM6IHJlcS5oZWFkZXJzLmRlbGV0ZSgnaWdub3JlUHJvZ3Jlc3NCYXInKX0pKTtcbiAgICB9XG5cbiAgICAvLyBJZ25vcmUgc2lsZW50IGFwaSByZXF1ZXN0c1xuICAgIGlmICh0aGlzLmNoZWNrVXJsKHJlcSkpIHtcbiAgICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpO1xuICAgIH1cblxuICAgIHRoaXMuX2luUHJvZ3Jlc3NDb3VudCsrO1xuXG4gICAgdGhpcy5fcHJvZ3Jlc3NSZWYgPSB0aGlzLm5nUHJvZ3Jlc3MucmVmKHRoaXMuX2NvbmZpZy5pZCk7XG4gICAgaWYgKCF0aGlzLl9wcm9ncmVzc1JlZi5pc1N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3Byb2dyZXNzUmVmLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSkucGlwZShcbiAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgdGhpcy5faW5Qcm9ncmVzc0NvdW50LS07XG4gICAgICAgIGlmICh0aGlzLl9pblByb2dyZXNzQ291bnQgPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9wcm9ncmVzc1JlZi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgcmVxdWVzdCBpcyBzaWxlbnQuXG4gICAqIEBwYXJhbSByZXEgcmVxdWVzdFxuICAgKi9cbiAgcHJpdmF0ZSBjaGVja1VybChyZXE6IEh0dHBSZXF1ZXN0PGFueT4pOiBib29sZWFuIHtcbiAgICBjb25zdCB1cmwgPSByZXEudXJsLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZm91bmQgPSB0aGlzLl9jb25maWcuc2lsZW50QXBpcy5maW5kKCh1KSA9PiB1cmwuc3RhcnRzV2l0aCh1KSk7XG4gICAgcmV0dXJuICEhZm91bmQ7XG4gIH1cbn1cbiJdfQ==