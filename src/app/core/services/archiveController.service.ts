// /**
//  * Halo API Documentation
//  * Documentation for Halo API
//  *
//  * OpenAPI spec version: unknown
//  * Contact: hi@halo.run
//  *
//  * NOTE: This class is auto generated by the swagger code generator program.
//  * https://github.com/swagger-api/swagger-codegen.git
//  * Do not edit the class manually.
//  */
// /* tslint:disable:no-unused-variable member-ordering */

// import { Inject, Injectable, Optional }                      from '@angular/core';
// import { HttpClient, HttpHeaders, HttpParams,
//          HttpResponse, HttpEvent }                           from '@angular/common/http';
// import { CustomHttpUrlEncodingCodec }                        from '../encoder';

// import { Observable }                                        from 'rxjs/Observable';

// import { ArchiveMonthVO } from '../model/archiveMonthVO';
// import { ArchiveYearVO } from '../model/archiveYearVO';

// import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
// import { Configuration }                                     from '../configuration';


// @Injectable()
// export class ArchiveControllerService {

//     protected basePath = 'https://127.0.0.1:8090';
//     public defaultHeaders = new HttpHeaders();
//     public configuration = new Configuration();

//     constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
//         if (basePath) {
//             this.basePath = basePath;
//         }
//         if (configuration) {
//             this.configuration = configuration;
//             this.basePath = basePath || configuration.basePath || this.basePath;
//         }
//     }

//     /**
//      * @param consumes string[] mime-types
//      * @return true: consumes contains 'multipart/form-data', false: otherwise
//      */
//     private canConsumeForm(consumes: string[]): boolean {
//         const form = 'multipart/form-data';
//         for (const consume of consumes) {
//             if (form === consume) {
//                 return true;
//             }
//         }
//         return false;
//     }


//     /**
//      * listMonthArchives
//      * 
//      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
//      * @param reportProgress flag to report request and response progress.
//      */
//     public listMonthArchivesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ArchiveMonthVO>>;
//     public listMonthArchivesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArchiveMonthVO>>>;
//     public listMonthArchivesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArchiveMonthVO>>>;
//     public listMonthArchivesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

//         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

//         let headers = this.defaultHeaders;

//         // authentication (Access key from header) required
//         if (this.configuration.apiKeys && this.configuration.apiKeys["API-Authorization"]) {
//             headers = headers.set('API-Authorization', this.configuration.apiKeys["API-Authorization"]);
//         }

//         // authentication (Access key from query) required
//         if (this.configuration.apiKeys && this.configuration.apiKeys["api_access_key"]) {
//             queryParameters = queryParameters.set('api_access_key', this.configuration.apiKeys["api_access_key"]);
//         }

//         // to determine the Accept header
//         let httpHeaderAccepts: string[] = [
//             '*/*'
//         ];
//         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
//         if (httpHeaderAcceptSelected != undefined) {
//             headers = headers.set('Accept', httpHeaderAcceptSelected);
//         }

//         // to determine the Content-Type header
//         const consumes: string[] = [
//         ];

//         return this.httpClient.get<Array<ArchiveMonthVO>>(`${this.basePath}/api/content/archives/months`,
//             {
//                 params: queryParameters,
//                 withCredentials: this.configuration.withCredentials,
//                 headers: headers,
//                 observe: observe,
//                 reportProgress: reportProgress
//             }
//         );
//     }

//     /**
//      * listYearArchives
//      * 
//      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
//      * @param reportProgress flag to report request and response progress.
//      */
//     public listYearArchivesUsingGET(observe?: 'body', reportProgress?: boolean): Observable<Array<ArchiveYearVO>>;
//     public listYearArchivesUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ArchiveYearVO>>>;
//     public listYearArchivesUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ArchiveYearVO>>>;
//     public listYearArchivesUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

//         let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});

//         let headers = this.defaultHeaders;

//         // authentication (Access key from header) required
//         if (this.configuration.apiKeys && this.configuration.apiKeys["API-Authorization"]) {
//             headers = headers.set('API-Authorization', this.configuration.apiKeys["API-Authorization"]);
//         }

//         // authentication (Access key from query) required
//         if (this.configuration.apiKeys && this.configuration.apiKeys["api_access_key"]) {
//             queryParameters = queryParameters.set('api_access_key', this.configuration.apiKeys["api_access_key"]);
//         }

//         // to determine the Accept header
//         let httpHeaderAccepts: string[] = [
//             '*/*'
//         ];
//         const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
//         if (httpHeaderAcceptSelected != undefined) {
//             headers = headers.set('Accept', httpHeaderAcceptSelected);
//         }

//         // to determine the Content-Type header
//         const consumes: string[] = [
//         ];

//         return this.httpClient.get<Array<ArchiveYearVO>>(`${this.basePath}/api/content/archives/years`,
//             {
//                 params: queryParameters,
//                 withCredentials: this.configuration.withCredentials,
//                 headers: headers,
//                 observe: observe,
//                 reportProgress: reportProgress
//             }
//         );
//     }

// }
